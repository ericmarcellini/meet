{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/workbox-core/_version.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-expiration/_version.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/workbox-core/models/messages/messages.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/utils/pluginUtils.js","../node_modules/workbox-core/_private/cacheWrapper.js","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/workbox-core/_private/DBWrapper.js","../node_modules/workbox-core/_private/deleteDatabase.js","../node_modules/workbox-core/_private/fetchWrapper.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-precaching/utils/precachePlugins.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/utils/getCacheKeyForURL.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/utils/addFetchListener.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../node_modules/workbox-core/clientsClaim.js","service-worker.js","../node_modules/workbox-precaching/createHandlerBoundToURL.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","_","e","runtime","undefined","Op","hasOwn","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","obj","configurable","writable","err","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","minLen","toString","from","test","_toConsumableArray","isArray","_createForOfIteratorHelper","allowArrayLike","it","F","_e","f","normalCompletion","didErr","step","_e2","_classCallCheck","instance","Constructor","_setPrototypeOf","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","_typeof","_possibleConstructorReturn","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","arguments","apply","Parent","args","Class","a","_cache","Map","indexOf","has","set","Wrapper","messageGenerator","code","msg","JSON","stringify","WorkboxError","errorCode","details","message","quotaErrorCallbacks","Set","registerQuotaErrorCallback","callback","add","_cacheNameDetails","googleAnalytics","precache","prefix","suffix","registration","scope","_createCacheName","cacheName","filter","join","cacheNames","userCacheName","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","executeQuotaErrorCallbacks","process","supportStatus","getFriendlyURL","url","URL","String","location","href","replace","RegExp","origin","pluginUtils","plugins","callbackName","plugin","_getEffectiveRequest","request","cacheKeyWillBeUsedPlugins","effectiveRequest","Request","_isResponseSafeToCache","response","event","responseToCache","pluginsUsed","pluginMethod","status","matchWrapper","matchOptions","caches","open","cache","match","cachedResponse","putWrapper","updatePlugins","oldResponse","put","newResponse","cacheWrapper","canConstructResponseFromBodyStream","testResponse","Response","body","dontWaitFor","promise","_slicedToArray","_arr","_n","_d","_s","_i","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","DBWrapper","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","close","openRequestTimedOut","setTimeout","OPEN_TIMEOUT","openRequest","indexedDB","onerror","evt","transaction","abort","onsuccess","db","storeName","query","getAllKeys","count","getAllMatching","includeKeys","entries","map","index","direction","txn","store","objectStore","results","openCursor","cursor","continue","storeNames","onabort","oncomplete","objStore","IDBObjectStore","_call","readonly","readwrite","deleteDatabase","onblocked","wrappedFetch","fetchOptions","FetchEvent","preloadResponse","possiblePreloadResponse","failedFetchPlugins","originalRequest","clone","requestClone","thrownError","pluginFilteredRequest","fetch","fetchResponse","fetchWrapper","copyResponse","modifier","clonedResponse","responseInit","headers","Headers","statusText","modifiedResponseInit","blob","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","hash","CacheTimestampsModel","_cacheName","_handleUpgrade","createObjectStore","keyPath","createIndex","unique","timestamp","id","_getId","minTimestamp","maxCount","entriesToDelete","entriesNotDeletedCount","urlsDeleted","delete","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_timestampModel","now","expireEntries","urlsExpired","setTimestamp","getTimestamp","expireOlderThan","Infinity","ExpirationPlugin","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","waitUntil","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","getTime","precachePlugins","createCacheKey","urlObject","cacheKey","revision","cacheKeyURL","originalURL","searchParams","precacheController","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","integrity","warningMessage","console","warn","toBePrecached","alreadyPrecached","alreadyCachedRequests","existingCacheKeys","precacheRequests","_addURLToCache","all","updatedURLs","item","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","credentials","cacheWillUpdatePlugin","cacheWillUpdate","redirected","ignoreSearch","getCacheKeyForURL","fallbackToNetwork","matchPrecache","handler","createHandler","getOrCreatePrecacheController","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","some","regExp","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","options","urlsToCacheKeys","getURLsToCacheKeys","possibleURL","possibleCacheKey","listenerAdded","addRoute","addEventListener","precachedURL","responsePromise","respondWith","addFetchListener","installListener","install","catch","activateListener","activate","defaultRouter","normalizeHandler","Route","RegExpRoute","exec","Router","_routes","handleRequest","data","payload","requestPromises","urlsToCache","ports","postMessage","protocol","startsWith","findMatchingRoute","params","route","_defaultHandler","_catchHandler","matchResult","routeIndex","splice","getOrCreateDefaultRouter","addCacheListener","registerRoute","capture","captureUrl","moduleName","funcName","cacheOkAndOpaquePlugin","StaleWhileRevalidate","_plugins","isUsingCacheWillUpdate","_fetchOptions","_matchOptions","fetchAndCachePromise","_getFromNetwork","cachePutPromise","clients","claim","addToCacheList","__WB_MANIFEST","fileExtensionRegexp","createHandlerBoundToURL","skipWaiting"],"mappings":"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","file":"service-worker.js","sourceRoot":"","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/meet/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"regenerator-runtime\");\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:5.1.4'] && _();\r\n}\r\ncatch (e) { }\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:precaching:5.1.4'] && _();\r\n}\r\ncatch (e) { }\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:routing:5.1.4'] && _();\r\n}\r\ncatch (e) { }\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:strategies:5.1.4'] && _();\r\n}\r\ncatch (e) { }\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:expiration:5.1.4'] && _();\r\n}\r\ncatch (e) { }\r\n","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nvar runtime = (function (exports) {\r\n  \"use strict\";\r\n\r\n  var Op = Object.prototype;\r\n  var hasOwn = Op.hasOwnProperty;\r\n  var undefined; // More compressible than void 0.\r\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\r\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\r\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\r\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\r\n\r\n  function define(obj, key, value) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n    return obj[key];\r\n  }\r\n  try {\r\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\r\n    define({}, \"\");\r\n  } catch (err) {\r\n    define = function(obj, key, value) {\r\n      return obj[key] = value;\r\n    };\r\n  }\r\n\r\n  function wrap(innerFn, outerFn, self, tryLocsList) {\r\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\r\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\r\n    var generator = Object.create(protoGenerator.prototype);\r\n    var context = new Context(tryLocsList || []);\r\n\r\n    // The ._invoke method unifies the implementations of the .next,\r\n    // .throw, and .return methods.\r\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\r\n\r\n    return generator;\r\n  }\r\n  exports.wrap = wrap;\r\n\r\n  // Try/catch helper to minimize deoptimizations. Returns a completion\r\n  // record like context.tryEntries[i].completion. This interface could\r\n  // have been (and was previously) designed to take a closure to be\r\n  // invoked without arguments, but in all the cases we care about we\r\n  // already have an existing method we want to call, so there's no need\r\n  // to create a new function object. We can even get away with assuming\r\n  // the method takes exactly one argument, since that happens to be true\r\n  // in every case, so we don't have to touch the arguments object. The\r\n  // only additional allocation required is the completion record, which\r\n  // has a stable shape and so hopefully should be cheap to allocate.\r\n  function tryCatch(fn, obj, arg) {\r\n    try {\r\n      return { type: \"normal\", arg: fn.call(obj, arg) };\r\n    } catch (err) {\r\n      return { type: \"throw\", arg: err };\r\n    }\r\n  }\r\n\r\n  var GenStateSuspendedStart = \"suspendedStart\";\r\n  var GenStateSuspendedYield = \"suspendedYield\";\r\n  var GenStateExecuting = \"executing\";\r\n  var GenStateCompleted = \"completed\";\r\n\r\n  // Returning this object from the innerFn has the same effect as\r\n  // breaking out of the dispatch switch statement.\r\n  var ContinueSentinel = {};\r\n\r\n  // Dummy constructor functions that we use as the .constructor and\r\n  // .constructor.prototype properties for functions that return Generator\r\n  // objects. For full spec compliance, you may wish to configure your\r\n  // minifier not to mangle the names of these two functions.\r\n  function Generator() {}\r\n  function GeneratorFunction() {}\r\n  function GeneratorFunctionPrototype() {}\r\n\r\n  // This is a polyfill for %IteratorPrototype% for environments that\r\n  // don't natively support it.\r\n  var IteratorPrototype = {};\r\n  define(IteratorPrototype, iteratorSymbol, function () {\r\n    return this;\r\n  });\r\n\r\n  var getProto = Object.getPrototypeOf;\r\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\r\n  if (NativeIteratorPrototype &&\r\n      NativeIteratorPrototype !== Op &&\r\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\r\n    // This environment has a native %IteratorPrototype%; use it instead\r\n    // of the polyfill.\r\n    IteratorPrototype = NativeIteratorPrototype;\r\n  }\r\n\r\n  var Gp = GeneratorFunctionPrototype.prototype =\r\n    Generator.prototype = Object.create(IteratorPrototype);\r\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\r\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\r\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\r\n  GeneratorFunction.displayName = define(\r\n    GeneratorFunctionPrototype,\r\n    toStringTagSymbol,\r\n    \"GeneratorFunction\"\r\n  );\r\n\r\n  // Helper for defining the .next, .throw, and .return methods of the\r\n  // Iterator interface in terms of a single ._invoke method.\r\n  function defineIteratorMethods(prototype) {\r\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\r\n      define(prototype, method, function(arg) {\r\n        return this._invoke(method, arg);\r\n      });\r\n    });\r\n  }\r\n\r\n  exports.isGeneratorFunction = function(genFun) {\r\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\r\n    return ctor\r\n      ? ctor === GeneratorFunction ||\r\n        // For the native GeneratorFunction constructor, the best we can\r\n        // do is to check its .name property.\r\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\r\n      : false;\r\n  };\r\n\r\n  exports.mark = function(genFun) {\r\n    if (Object.setPrototypeOf) {\r\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\r\n    } else {\r\n      genFun.__proto__ = GeneratorFunctionPrototype;\r\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\r\n    }\r\n    genFun.prototype = Object.create(Gp);\r\n    return genFun;\r\n  };\r\n\r\n  // Within the body of any async function, `await x` is transformed to\r\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\r\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\r\n  // meant to be awaited.\r\n  exports.awrap = function(arg) {\r\n    return { __await: arg };\r\n  };\r\n\r\n  function AsyncIterator(generator, PromiseImpl) {\r\n    function invoke(method, arg, resolve, reject) {\r\n      var record = tryCatch(generator[method], generator, arg);\r\n      if (record.type === \"throw\") {\r\n        reject(record.arg);\r\n      } else {\r\n        var result = record.arg;\r\n        var value = result.value;\r\n        if (value &&\r\n            typeof value === \"object\" &&\r\n            hasOwn.call(value, \"__await\")) {\r\n          return PromiseImpl.resolve(value.__await).then(function(value) {\r\n            invoke(\"next\", value, resolve, reject);\r\n          }, function(err) {\r\n            invoke(\"throw\", err, resolve, reject);\r\n          });\r\n        }\r\n\r\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\r\n          // When a yielded Promise is resolved, its final value becomes\r\n          // the .value of the Promise<{value,done}> result for the\r\n          // current iteration.\r\n          result.value = unwrapped;\r\n          resolve(result);\r\n        }, function(error) {\r\n          // If a rejected Promise was yielded, throw the rejection back\r\n          // into the async generator function so it can be handled there.\r\n          return invoke(\"throw\", error, resolve, reject);\r\n        });\r\n      }\r\n    }\r\n\r\n    var previousPromise;\r\n\r\n    function enqueue(method, arg) {\r\n      function callInvokeWithMethodAndArg() {\r\n        return new PromiseImpl(function(resolve, reject) {\r\n          invoke(method, arg, resolve, reject);\r\n        });\r\n      }\r\n\r\n      return previousPromise =\r\n        // If enqueue has been called before, then we want to wait until\r\n        // all previous Promises have been resolved before calling invoke,\r\n        // so that results are always delivered in the correct order. If\r\n        // enqueue has not been called before, then it is important to\r\n        // call invoke immediately, without waiting on a callback to fire,\r\n        // so that the async generator function has the opportunity to do\r\n        // any necessary setup in a predictable way. This predictability\r\n        // is why the Promise constructor synchronously invokes its\r\n        // executor callback, and why async functions synchronously\r\n        // execute code before the first await. Since we implement simple\r\n        // async functions in terms of async generators, it is especially\r\n        // important to get this right, even though it requires care.\r\n        previousPromise ? previousPromise.then(\r\n          callInvokeWithMethodAndArg,\r\n          // Avoid propagating failures to Promises returned by later\r\n          // invocations of the iterator.\r\n          callInvokeWithMethodAndArg\r\n        ) : callInvokeWithMethodAndArg();\r\n    }\r\n\r\n    // Define the unified helper method that is used to implement .next,\r\n    // .throw, and .return (see defineIteratorMethods).\r\n    this._invoke = enqueue;\r\n  }\r\n\r\n  defineIteratorMethods(AsyncIterator.prototype);\r\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\r\n    return this;\r\n  });\r\n  exports.AsyncIterator = AsyncIterator;\r\n\r\n  // Note that simple async functions are implemented on top of\r\n  // AsyncIterator objects; they just return a Promise for the value of\r\n  // the final result produced by the iterator.\r\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\r\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\r\n\r\n    var iter = new AsyncIterator(\r\n      wrap(innerFn, outerFn, self, tryLocsList),\r\n      PromiseImpl\r\n    );\r\n\r\n    return exports.isGeneratorFunction(outerFn)\r\n      ? iter // If outerFn is a generator, return the full iterator.\r\n      : iter.next().then(function(result) {\r\n          return result.done ? result.value : iter.next();\r\n        });\r\n  };\r\n\r\n  function makeInvokeMethod(innerFn, self, context) {\r\n    var state = GenStateSuspendedStart;\r\n\r\n    return function invoke(method, arg) {\r\n      if (state === GenStateExecuting) {\r\n        throw new Error(\"Generator is already running\");\r\n      }\r\n\r\n      if (state === GenStateCompleted) {\r\n        if (method === \"throw\") {\r\n          throw arg;\r\n        }\r\n\r\n        // Be forgiving, per 25.3.3.3.3 of the spec:\r\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\r\n        return doneResult();\r\n      }\r\n\r\n      context.method = method;\r\n      context.arg = arg;\r\n\r\n      while (true) {\r\n        var delegate = context.delegate;\r\n        if (delegate) {\r\n          var delegateResult = maybeInvokeDelegate(delegate, context);\r\n          if (delegateResult) {\r\n            if (delegateResult === ContinueSentinel) continue;\r\n            return delegateResult;\r\n          }\r\n        }\r\n\r\n        if (context.method === \"next\") {\r\n          // Setting context._sent for legacy support of Babel's\r\n          // function.sent implementation.\r\n          context.sent = context._sent = context.arg;\r\n\r\n        } else if (context.method === \"throw\") {\r\n          if (state === GenStateSuspendedStart) {\r\n            state = GenStateCompleted;\r\n            throw context.arg;\r\n          }\r\n\r\n          context.dispatchException(context.arg);\r\n\r\n        } else if (context.method === \"return\") {\r\n          context.abrupt(\"return\", context.arg);\r\n        }\r\n\r\n        state = GenStateExecuting;\r\n\r\n        var record = tryCatch(innerFn, self, context);\r\n        if (record.type === \"normal\") {\r\n          // If an exception is thrown from innerFn, we leave state ===\r\n          // GenStateExecuting and loop back for another invocation.\r\n          state = context.done\r\n            ? GenStateCompleted\r\n            : GenStateSuspendedYield;\r\n\r\n          if (record.arg === ContinueSentinel) {\r\n            continue;\r\n          }\r\n\r\n          return {\r\n            value: record.arg,\r\n            done: context.done\r\n          };\r\n\r\n        } else if (record.type === \"throw\") {\r\n          state = GenStateCompleted;\r\n          // Dispatch the exception by looping back around to the\r\n          // context.dispatchException(context.arg) call above.\r\n          context.method = \"throw\";\r\n          context.arg = record.arg;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Call delegate.iterator[context.method](context.arg) and handle the\r\n  // result, either by returning a { value, done } result from the\r\n  // delegate iterator, or by modifying context.method and context.arg,\r\n  // setting context.delegate to null, and returning the ContinueSentinel.\r\n  function maybeInvokeDelegate(delegate, context) {\r\n    var method = delegate.iterator[context.method];\r\n    if (method === undefined) {\r\n      // A .throw or .return when the delegate iterator has no .throw\r\n      // method always terminates the yield* loop.\r\n      context.delegate = null;\r\n\r\n      if (context.method === \"throw\") {\r\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\r\n        if (delegate.iterator[\"return\"]) {\r\n          // If the delegate iterator has a return method, give it a\r\n          // chance to clean up.\r\n          context.method = \"return\";\r\n          context.arg = undefined;\r\n          maybeInvokeDelegate(delegate, context);\r\n\r\n          if (context.method === \"throw\") {\r\n            // If maybeInvokeDelegate(context) changed context.method from\r\n            // \"return\" to \"throw\", let that override the TypeError below.\r\n            return ContinueSentinel;\r\n          }\r\n        }\r\n\r\n        context.method = \"throw\";\r\n        context.arg = new TypeError(\r\n          \"The iterator does not provide a 'throw' method\");\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var record = tryCatch(method, delegate.iterator, context.arg);\r\n\r\n    if (record.type === \"throw\") {\r\n      context.method = \"throw\";\r\n      context.arg = record.arg;\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var info = record.arg;\r\n\r\n    if (! info) {\r\n      context.method = \"throw\";\r\n      context.arg = new TypeError(\"iterator result is not an object\");\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    if (info.done) {\r\n      // Assign the result of the finished delegate to the temporary\r\n      // variable specified by delegate.resultName (see delegateYield).\r\n      context[delegate.resultName] = info.value;\r\n\r\n      // Resume execution at the desired location (see delegateYield).\r\n      context.next = delegate.nextLoc;\r\n\r\n      // If context.method was \"throw\" but the delegate handled the\r\n      // exception, let the outer generator proceed normally. If\r\n      // context.method was \"next\", forget context.arg since it has been\r\n      // \"consumed\" by the delegate iterator. If context.method was\r\n      // \"return\", allow the original .return call to continue in the\r\n      // outer generator.\r\n      if (context.method !== \"return\") {\r\n        context.method = \"next\";\r\n        context.arg = undefined;\r\n      }\r\n\r\n    } else {\r\n      // Re-yield the result returned by the delegate method.\r\n      return info;\r\n    }\r\n\r\n    // The delegate iterator is finished, so forget it and continue with\r\n    // the outer generator.\r\n    context.delegate = null;\r\n    return ContinueSentinel;\r\n  }\r\n\r\n  // Define Generator.prototype.{next,throw,return} in terms of the\r\n  // unified ._invoke helper method.\r\n  defineIteratorMethods(Gp);\r\n\r\n  define(Gp, toStringTagSymbol, \"Generator\");\r\n\r\n  // A Generator should always return itself as the iterator object when the\r\n  // @@iterator function is called on it. Some browsers' implementations of the\r\n  // iterator prototype chain incorrectly implement this, causing the Generator\r\n  // object to not be returned from this call. This ensures that doesn't happen.\r\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\r\n  define(Gp, iteratorSymbol, function() {\r\n    return this;\r\n  });\r\n\r\n  define(Gp, \"toString\", function() {\r\n    return \"[object Generator]\";\r\n  });\r\n\r\n  function pushTryEntry(locs) {\r\n    var entry = { tryLoc: locs[0] };\r\n\r\n    if (1 in locs) {\r\n      entry.catchLoc = locs[1];\r\n    }\r\n\r\n    if (2 in locs) {\r\n      entry.finallyLoc = locs[2];\r\n      entry.afterLoc = locs[3];\r\n    }\r\n\r\n    this.tryEntries.push(entry);\r\n  }\r\n\r\n  function resetTryEntry(entry) {\r\n    var record = entry.completion || {};\r\n    record.type = \"normal\";\r\n    delete record.arg;\r\n    entry.completion = record;\r\n  }\r\n\r\n  function Context(tryLocsList) {\r\n    // The root entry object (effectively a try statement without a catch\r\n    // or a finally block) gives us a place to store values thrown from\r\n    // locations where there is no enclosing try statement.\r\n    this.tryEntries = [{ tryLoc: \"root\" }];\r\n    tryLocsList.forEach(pushTryEntry, this);\r\n    this.reset(true);\r\n  }\r\n\r\n  exports.keys = function(object) {\r\n    var keys = [];\r\n    for (var key in object) {\r\n      keys.push(key);\r\n    }\r\n    keys.reverse();\r\n\r\n    // Rather than returning an object with a next method, we keep\r\n    // things simple and return the next function itself.\r\n    return function next() {\r\n      while (keys.length) {\r\n        var key = keys.pop();\r\n        if (key in object) {\r\n          next.value = key;\r\n          next.done = false;\r\n          return next;\r\n        }\r\n      }\r\n\r\n      // To avoid creating an additional object, we just hang the .value\r\n      // and .done properties off the next function object itself. This\r\n      // also ensures that the minifier will not anonymize the function.\r\n      next.done = true;\r\n      return next;\r\n    };\r\n  };\r\n\r\n  function values(iterable) {\r\n    if (iterable) {\r\n      var iteratorMethod = iterable[iteratorSymbol];\r\n      if (iteratorMethod) {\r\n        return iteratorMethod.call(iterable);\r\n      }\r\n\r\n      if (typeof iterable.next === \"function\") {\r\n        return iterable;\r\n      }\r\n\r\n      if (!isNaN(iterable.length)) {\r\n        var i = -1, next = function next() {\r\n          while (++i < iterable.length) {\r\n            if (hasOwn.call(iterable, i)) {\r\n              next.value = iterable[i];\r\n              next.done = false;\r\n              return next;\r\n            }\r\n          }\r\n\r\n          next.value = undefined;\r\n          next.done = true;\r\n\r\n          return next;\r\n        };\r\n\r\n        return next.next = next;\r\n      }\r\n    }\r\n\r\n    // Return an iterator with no values.\r\n    return { next: doneResult };\r\n  }\r\n  exports.values = values;\r\n\r\n  function doneResult() {\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  Context.prototype = {\r\n    constructor: Context,\r\n\r\n    reset: function(skipTempReset) {\r\n      this.prev = 0;\r\n      this.next = 0;\r\n      // Resetting context._sent for legacy support of Babel's\r\n      // function.sent implementation.\r\n      this.sent = this._sent = undefined;\r\n      this.done = false;\r\n      this.delegate = null;\r\n\r\n      this.method = \"next\";\r\n      this.arg = undefined;\r\n\r\n      this.tryEntries.forEach(resetTryEntry);\r\n\r\n      if (!skipTempReset) {\r\n        for (var name in this) {\r\n          // Not sure about the optimal order of these conditions:\r\n          if (name.charAt(0) === \"t\" &&\r\n              hasOwn.call(this, name) &&\r\n              !isNaN(+name.slice(1))) {\r\n            this[name] = undefined;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    stop: function() {\r\n      this.done = true;\r\n\r\n      var rootEntry = this.tryEntries[0];\r\n      var rootRecord = rootEntry.completion;\r\n      if (rootRecord.type === \"throw\") {\r\n        throw rootRecord.arg;\r\n      }\r\n\r\n      return this.rval;\r\n    },\r\n\r\n    dispatchException: function(exception) {\r\n      if (this.done) {\r\n        throw exception;\r\n      }\r\n\r\n      var context = this;\r\n      function handle(loc, caught) {\r\n        record.type = \"throw\";\r\n        record.arg = exception;\r\n        context.next = loc;\r\n\r\n        if (caught) {\r\n          // If the dispatched exception was caught by a catch block,\r\n          // then let that catch block handle the exception normally.\r\n          context.method = \"next\";\r\n          context.arg = undefined;\r\n        }\r\n\r\n        return !! caught;\r\n      }\r\n\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        var record = entry.completion;\r\n\r\n        if (entry.tryLoc === \"root\") {\r\n          // Exception thrown outside of any try block that could handle\r\n          // it, so set the completion value of the entire function to\r\n          // throw the exception.\r\n          return handle(\"end\");\r\n        }\r\n\r\n        if (entry.tryLoc <= this.prev) {\r\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\r\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\r\n\r\n          if (hasCatch && hasFinally) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            } else if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n\r\n          } else if (hasCatch) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            }\r\n\r\n          } else if (hasFinally) {\r\n            if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n\r\n          } else {\r\n            throw new Error(\"try statement without catch or finally\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    abrupt: function(type, arg) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.tryLoc <= this.prev &&\r\n            hasOwn.call(entry, \"finallyLoc\") &&\r\n            this.prev < entry.finallyLoc) {\r\n          var finallyEntry = entry;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (finallyEntry &&\r\n          (type === \"break\" ||\r\n           type === \"continue\") &&\r\n          finallyEntry.tryLoc <= arg &&\r\n          arg <= finallyEntry.finallyLoc) {\r\n        // Ignore the finally entry if control is not jumping to a\r\n        // location outside the try/catch block.\r\n        finallyEntry = null;\r\n      }\r\n\r\n      var record = finallyEntry ? finallyEntry.completion : {};\r\n      record.type = type;\r\n      record.arg = arg;\r\n\r\n      if (finallyEntry) {\r\n        this.method = \"next\";\r\n        this.next = finallyEntry.finallyLoc;\r\n        return ContinueSentinel;\r\n      }\r\n\r\n      return this.complete(record);\r\n    },\r\n\r\n    complete: function(record, afterLoc) {\r\n      if (record.type === \"throw\") {\r\n        throw record.arg;\r\n      }\r\n\r\n      if (record.type === \"break\" ||\r\n          record.type === \"continue\") {\r\n        this.next = record.arg;\r\n      } else if (record.type === \"return\") {\r\n        this.rval = this.arg = record.arg;\r\n        this.method = \"return\";\r\n        this.next = \"end\";\r\n      } else if (record.type === \"normal\" && afterLoc) {\r\n        this.next = afterLoc;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    },\r\n\r\n    finish: function(finallyLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.finallyLoc === finallyLoc) {\r\n          this.complete(entry.completion, entry.afterLoc);\r\n          resetTryEntry(entry);\r\n          return ContinueSentinel;\r\n        }\r\n      }\r\n    },\r\n\r\n    \"catch\": function(tryLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.tryLoc === tryLoc) {\r\n          var record = entry.completion;\r\n          if (record.type === \"throw\") {\r\n            var thrown = record.arg;\r\n            resetTryEntry(entry);\r\n          }\r\n          return thrown;\r\n        }\r\n      }\r\n\r\n      // The context.catch method must only be called with a location\r\n      // argument that corresponds to a known catch block.\r\n      throw new Error(\"illegal catch attempt\");\r\n    },\r\n\r\n    delegateYield: function(iterable, resultName, nextLoc) {\r\n      this.delegate = {\r\n        iterator: values(iterable),\r\n        resultName: resultName,\r\n        nextLoc: nextLoc\r\n      };\r\n\r\n      if (this.method === \"next\") {\r\n        // Deliberately forget the last sent value so that we don't\r\n        // accidentally pass it on to the delegate.\r\n        this.arg = undefined;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n  };\r\n\r\n  // Regardless of whether this script is executing as a CommonJS module\r\n  // or not, return the runtime object so that we can declare the variable\r\n  // regeneratorRuntime in the outer scope, which allows this module to be\r\n  // injected easily by `bin/regenerator --include-runtime script.js`.\r\n  return exports;\r\n\r\n}(\r\n  // If this script is executing as a CommonJS module, use module.exports\r\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\r\n  // object. Either way, the resulting object will be used to initialize\r\n  // the regeneratorRuntime variable at the top of this file.\r\n  typeof module === \"object\" ? module.exports : {}\r\n));\r\n\r\ntry {\r\n  regeneratorRuntime = runtime;\r\n} catch (accidentalStrictMode) {\r\n  // This module should not be running in strict mode, so the above\r\n  // assignment should always work unless something is misconfigured. Just\r\n  // in case runtime.js accidentally runs in strict mode, in modern engines\r\n  // we can explicitly access globalThis. In older engines we can escape\r\n  // strict mode using a global Function call. This could conceivably fail\r\n  // if a Content Security Policy forbids using Function, but in that case\r\n  // the proper solution is to fix the accidental strict mode problem. If\r\n  // you've misconfigured your bundler to force strict mode and applied a\r\n  // CSP to forbid Function, and you're not willing to fix either of those\r\n  // problems, please detail your unique predicament in a GitHub issue.\r\n  if (typeof globalThis === \"object\") {\r\n    globalThis.regeneratorRuntime = runtime;\r\n  } else {\r\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\r\n  }\r\n}\r\n","export default function _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n    arr2[i] = arr[i];\r\n  }\r\n\r\n  return arr2;\r\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\r\nexport default function _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\r\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\r\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\r\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\r\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\r\nexport default function _toConsumableArray(arr) {\r\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\r\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\r\nexport default function _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\r\n}","export default function _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\r\n}","export default function _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\r\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\r\n  var it;\r\n\r\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\r\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\r\n      if (it) o = it;\r\n      var i = 0;\r\n\r\n      var F = function F() {};\r\n\r\n      return {\r\n        s: F,\r\n        n: function n() {\r\n          if (i >= o.length) return {\r\n            done: true\r\n          };\r\n          return {\r\n            done: false,\r\n            value: o[i++]\r\n          };\r\n        },\r\n        e: function e(_e) {\r\n          throw _e;\r\n        },\r\n        f: F\r\n      };\r\n    }\r\n\r\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n  }\r\n\r\n  var normalCompletion = true,\r\n      didErr = false,\r\n      err;\r\n  return {\r\n    s: function s() {\r\n      it = o[Symbol.iterator]();\r\n    },\r\n    n: function n() {\r\n      var step = it.next();\r\n      normalCompletion = step.done;\r\n      return step;\r\n    },\r\n    e: function e(_e2) {\r\n      didErr = true;\r\n      err = _e2;\r\n    },\r\n    f: function f() {\r\n      try {\r\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\r\n      } finally {\r\n        if (didErr) throw err;\r\n      }\r\n    }\r\n  };\r\n}","export default function _classCallCheck(instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new TypeError(\"Cannot call a class as a function\");\r\n  }\r\n}","export default function _setPrototypeOf(o, p) {\r\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n    o.__proto__ = p;\r\n    return o;\r\n  };\r\n\r\n  return _setPrototypeOf(o, p);\r\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\r\nexport default function _inherits(subClass, superClass) {\r\n  if (typeof superClass !== \"function\" && superClass !== null) {\r\n    throw new TypeError(\"Super expression must either be null or a function\");\r\n  }\r\n\r\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n    constructor: {\r\n      value: subClass,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n  if (superClass) setPrototypeOf(subClass, superClass);\r\n}","export default function _getPrototypeOf(o) {\r\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n    return o.__proto__ || Object.getPrototypeOf(o);\r\n  };\r\n  return _getPrototypeOf(o);\r\n}","export default function _isNativeReflectConstruct() {\r\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n  if (Reflect.construct.sham) return false;\r\n  if (typeof Proxy === \"function\") return true;\r\n\r\n  try {\r\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}","export default function _typeof(obj) {\r\n  \"@babel/helpers - typeof\";\r\n\r\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n    _typeof = function _typeof(obj) {\r\n      return typeof obj;\r\n    };\r\n  } else {\r\n    _typeof = function _typeof(obj) {\r\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n    };\r\n  }\r\n\r\n  return _typeof(obj);\r\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\r\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\r\nexport default function _possibleConstructorReturn(self, call) {\r\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\r\n    return call;\r\n  }\r\n\r\n  return assertThisInitialized(self);\r\n}","export default function _assertThisInitialized(self) {\r\n  if (self === void 0) {\r\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n  }\r\n\r\n  return self;\r\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\r\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\r\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\r\nexport default function _createSuper(Derived) {\r\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\r\n  return function _createSuperInternal() {\r\n    var Super = getPrototypeOf(Derived),\r\n        result;\r\n\r\n    if (hasNativeReflectConstruct) {\r\n      var NewTarget = getPrototypeOf(this).constructor;\r\n      result = Reflect.construct(Super, arguments, NewTarget);\r\n    } else {\r\n      result = Super.apply(this, arguments);\r\n    }\r\n\r\n    return possibleConstructorReturn(this, result);\r\n  };\r\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\r\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\r\nexport default function _construct(Parent, args, Class) {\r\n  if (isNativeReflectConstruct()) {\r\n    _construct = Reflect.construct;\r\n  } else {\r\n    _construct = function _construct(Parent, args, Class) {\r\n      var a = [null];\r\n      a.push.apply(a, args);\r\n      var Constructor = Function.bind.apply(Parent, a);\r\n      var instance = new Constructor();\r\n      if (Class) setPrototypeOf(instance, Class.prototype);\r\n      return instance;\r\n    };\r\n  }\r\n\r\n  return _construct.apply(null, arguments);\r\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\r\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\r\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\r\nimport construct from \"@babel/runtime/helpers/esm/construct\";\r\nexport default function _wrapNativeSuper(Class) {\r\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\r\n\r\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\r\n    if (Class === null || !isNativeFunction(Class)) return Class;\r\n\r\n    if (typeof Class !== \"function\") {\r\n      throw new TypeError(\"Super expression must either be null or a function\");\r\n    }\r\n\r\n    if (typeof _cache !== \"undefined\") {\r\n      if (_cache.has(Class)) return _cache.get(Class);\r\n\r\n      _cache.set(Class, Wrapper);\r\n    }\r\n\r\n    function Wrapper() {\r\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\r\n    }\r\n\r\n    Wrapper.prototype = Object.create(Class.prototype, {\r\n      constructor: {\r\n        value: Wrapper,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n    return setPrototypeOf(Wrapper, Class);\r\n  };\r\n\r\n  return _wrapNativeSuper(Class);\r\n}","export default function _isNativeFunction(fn) {\r\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\r\n}","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../../_version.js';\r\nexport const messages = {\r\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\r\n        if (!paramName || !validValueDescription) {\r\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\r\n        }\r\n        return `The '${paramName}' parameter was given a value with an ` +\r\n            `unexpected value. ${validValueDescription} Received a value of ` +\r\n            `${JSON.stringify(value)}.`;\r\n    },\r\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\r\n        if (!moduleName || !className || !funcName || !paramName) {\r\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\r\n        }\r\n        return `The parameter '${paramName}' passed into ` +\r\n            `'${moduleName}.${className}.${funcName}()' must be an array.`;\r\n    },\r\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName }) => {\r\n        if (!expectedType || !paramName || !moduleName || !funcName) {\r\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\r\n        }\r\n        return `The parameter '${paramName}' passed into ` +\r\n            `'${moduleName}.${className ? (className + '.') : ''}` +\r\n            `${funcName}()' must be of type ${expectedType}.`;\r\n    },\r\n    'incorrect-class': ({ expectedClass, paramName, moduleName, className, funcName, isReturnValueProblem }) => {\r\n        if (!expectedClass || !moduleName || !funcName) {\r\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\r\n        }\r\n        if (isReturnValueProblem) {\r\n            return `The return value from ` +\r\n                `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\r\n                `must be an instance of class ${expectedClass.name}.`;\r\n        }\r\n        return `The parameter '${paramName}' passed into ` +\r\n            `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\r\n            `must be an instance of class ${expectedClass.name}.`;\r\n    },\r\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName }) => {\r\n        if (!expectedMethod || !paramName || !moduleName || !className\r\n            || !funcName) {\r\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\r\n        }\r\n        return `${moduleName}.${className}.${funcName}() expected the ` +\r\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\r\n    },\r\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\r\n        return `An unexpected entry was passed to ` +\r\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\r\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\r\n            `strings with one or more characters, objects with a url property or ` +\r\n            `Request objects.`;\r\n    },\r\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\r\n        if (!firstEntry || !secondEntry) {\r\n            throw new Error(`Unexpected input to ` +\r\n                `'add-to-cache-list-duplicate-entries' error.`);\r\n        }\r\n        return `Two of the entries passed to ` +\r\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\r\n            `${firstEntry._entryId} but different revision details. Workbox is ` +\r\n            `unable to cache and version the asset correctly. Please remove one ` +\r\n            `of the entries.`;\r\n    },\r\n    'plugin-error-request-will-fetch': ({ thrownError }) => {\r\n        if (!thrownError) {\r\n            throw new Error(`Unexpected input to ` +\r\n                `'plugin-error-request-will-fetch', error.`);\r\n        }\r\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\r\n            `The thrown error message was: '${thrownError.message}'.`;\r\n    },\r\n    'invalid-cache-name': ({ cacheNameId, value }) => {\r\n        if (!cacheNameId) {\r\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\r\n        }\r\n        return `You must provide a name containing at least one character for ` +\r\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\r\n            `'${JSON.stringify(value)}'`;\r\n    },\r\n    'unregister-route-but-not-found-with-method': ({ method }) => {\r\n        if (!method) {\r\n            throw new Error(`Unexpected input to ` +\r\n                `'unregister-route-but-not-found-with-method' error.`);\r\n        }\r\n        return `The route you're trying to unregister was not  previously ` +\r\n            `registered for the method type '${method}'.`;\r\n    },\r\n    'unregister-route-route-not-registered': () => {\r\n        return `The route you're trying to unregister was not previously ` +\r\n            `registered.`;\r\n    },\r\n    'queue-replay-failed': ({ name }) => {\r\n        return `Replaying the background sync queue '${name}' failed.`;\r\n    },\r\n    'duplicate-queue-name': ({ name }) => {\r\n        return `The Queue name '${name}' is already being used. ` +\r\n            `All instances of backgroundSync.Queue must be given unique names.`;\r\n    },\r\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\r\n        return `The '${methodName}()' method can only be used when the ` +\r\n            `'${paramName}' is used in the constructor.`;\r\n    },\r\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\r\n        return `The supplied '${paramName}' parameter was an unsupported type. ` +\r\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\r\n            `valid input types.`;\r\n    },\r\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName }) => {\r\n        return `The supplied '${paramName}' parameter must be an array of ` +\r\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\r\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\r\n            `to fix the issue.`;\r\n    },\r\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\r\n        return `You must define either config.maxEntries or config.maxAgeSeconds` +\r\n            `in ${moduleName}.${className}.${funcName}`;\r\n    },\r\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\r\n        return `You must define either config.statuses or config.headers` +\r\n            `in ${moduleName}.${className}.${funcName}`;\r\n    },\r\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\r\n        if (!paramName || !moduleName || !funcName) {\r\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\r\n        }\r\n        return `When using strings, the '${paramName}' parameter must start with ` +\r\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\r\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\r\n            `more info.`;\r\n    },\r\n    'channel-name-required': () => {\r\n        return `You must provide a channelName to construct a ` +\r\n            `BroadcastCacheUpdate instance.`;\r\n    },\r\n    'invalid-responses-are-same-args': () => {\r\n        return `The arguments passed into responsesAreSame() appear to be ` +\r\n            `invalid. Please ensure valid Responses are used.`;\r\n    },\r\n    'expire-custom-caches-only': () => {\r\n        return `You must provide a 'cacheName' property when using the ` +\r\n            `expiration plugin with a runtime caching strategy.`;\r\n    },\r\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\r\n        if (!normalizedRangeHeader) {\r\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\r\n        }\r\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\r\n            `The Range header provided was \"${normalizedRangeHeader}\"`;\r\n    },\r\n    'single-range-only': ({ normalizedRangeHeader }) => {\r\n        if (!normalizedRangeHeader) {\r\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\r\n        }\r\n        return `Multiple ranges are not supported. Please use a  single start ` +\r\n            `value, and optional end value. The Range header provided was ` +\r\n            `\"${normalizedRangeHeader}\"`;\r\n    },\r\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\r\n        if (!normalizedRangeHeader) {\r\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\r\n        }\r\n        return `The Range header is missing both start and end values. At least ` +\r\n            `one of those values is needed. The Range header provided was ` +\r\n            `\"${normalizedRangeHeader}\"`;\r\n    },\r\n    'no-range-header': () => {\r\n        return `No Range header was found in the Request provided.`;\r\n    },\r\n    'range-not-satisfiable': ({ size, start, end }) => {\r\n        return `The start (${start}) and end (${end}) values in the Range are ` +\r\n            `not satisfiable by the cached response, which is ${size} bytes.`;\r\n    },\r\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\r\n        return `Unable to cache '${url}' because it is a '${method}' request and ` +\r\n            `only 'GET' requests can be cached.`;\r\n    },\r\n    'cache-put-with-no-response': ({ url }) => {\r\n        return `There was an attempt to cache '${url}' but the response was not ` +\r\n            `defined.`;\r\n    },\r\n    'no-response': ({ url, error }) => {\r\n        let message = `The strategy could not generate a response for '${url}'.`;\r\n        if (error) {\r\n            message += ` The underlying error is ${error}.`;\r\n        }\r\n        return message;\r\n    },\r\n    'bad-precaching-response': ({ url, status }) => {\r\n        return `The precaching request for '${url}' failed with an HTTP ` +\r\n            `status of ${status}.`;\r\n    },\r\n    'non-precached-url': ({ url }) => {\r\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` +\r\n            `not precached. Please pass in a URL that is precached instead.`;\r\n    },\r\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\r\n        return `Two of the entries passed to ` +\r\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\r\n            `${url} with different integrity values. Please remove one of them.`;\r\n    },\r\n    'missing-precache-entry': ({ cacheName, url }) => {\r\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\r\n    fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        const message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from './_private/logger.js';\r\nimport { assert } from './_private/assert.js';\r\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\r\nimport './_version.js';\r\n/**\r\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\r\n * there's a quota error.\r\n *\r\n * @param {Function} callback\r\n * @memberof module:workbox-core\r\n */\r\nfunction registerQuotaErrorCallback(callback) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isType(callback, 'function', {\r\n            moduleName: 'workbox-core',\r\n            funcName: 'register',\r\n            paramName: 'callback',\r\n        });\r\n    }\r\n    quotaErrorCallbacks.add(callback);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Registered a callback to respond to quota errors.', callback);\r\n    }\r\n}\r\nexport { registerQuotaErrorCallback };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\r\n  try {\r\n    var info = gen[key](arg);\r\n    var value = info.value;\r\n  } catch (error) {\r\n    reject(error);\r\n    return;\r\n  }\r\n\r\n  if (info.done) {\r\n    resolve(value);\r\n  } else {\r\n    Promise.resolve(value).then(_next, _throw);\r\n  }\r\n}\r\n\r\nexport default function _asyncToGenerator(fn) {\r\n  return function () {\r\n    var self = this,\r\n        args = arguments;\r\n    return new Promise(function (resolve, reject) {\r\n      var gen = fn.apply(self, args);\r\n\r\n      function _next(value) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\r\n      }\r\n\r\n      function _throw(err) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\r\n      }\r\n\r\n      _next(undefined);\r\n    });\r\n  };\r\n}","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof module:workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const pluginUtils = {\r\n    filter: (plugins, callbackName) => {\r\n        return plugins.filter((plugin) => callbackName in plugin);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './assert.js';\r\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\r\nimport { getFriendlyURL } from './getFriendlyURL.js';\r\nimport { logger } from './logger.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport '../_version.js';\r\n/**\r\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\r\n * executes any of those callbacks found in sequence. The final `Request` object\r\n * returned by the last plugin is treated as the cache key for cache reads\r\n * and/or writes.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {string} options.mode\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Request>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\r\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\r\n    let effectiveRequest = request;\r\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\r\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\r\n        if (typeof effectiveRequest === 'string') {\r\n            effectiveRequest = new Request(effectiveRequest);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(effectiveRequest, Request, {\r\n                moduleName: 'Plugin',\r\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\r\n                isReturnValueProblem: true,\r\n            });\r\n        }\r\n    }\r\n    return effectiveRequest;\r\n};\r\n/**\r\n * This method will call cacheWillUpdate on the available plugins (or use\r\n * status === 200) to determine if the Response is safe and valid to cache.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\r\n    let responseToCache = response;\r\n    let pluginsUsed = false;\r\n    for (const plugin of plugins) {\r\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\r\n            pluginsUsed = true;\r\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\r\n            responseToCache = await pluginMethod.call(plugin, {\r\n                request,\r\n                response: responseToCache,\r\n                event,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (responseToCache) {\r\n                    assert.isInstance(responseToCache, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n            if (!responseToCache) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!pluginsUsed) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (responseToCache) {\r\n                if (responseToCache.status !== 200) {\r\n                    if (responseToCache.status === 0) {\r\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\r\n                            `response. The caching strategy that you're using will not ` +\r\n                            `cache opaque responses by default.`);\r\n                    }\r\n                    else {\r\n                        logger.debug(`The response for '${request.url}' returned ` +\r\n                            `a status code of '${response.status}' and won't be cached as a ` +\r\n                            `result.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        responseToCache = responseToCache && responseToCache.status === 200 ?\r\n            responseToCache : undefined;\r\n    }\r\n    return responseToCache ? responseToCache : null;\r\n};\r\n/**\r\n * This is a wrapper around cache.match().\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName Name of the cache to match against.\r\n * @param {Request} options.request The Request that will be used to look up\r\n *     cache entries.\r\n * @param {Event} [options.event] The event that prompted the action.\r\n * @param {Object} [options.matchOptions] Options passed to cache.match().\r\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\r\n * @return {Response} A cached response if available.\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\r\n    const cache = await self.caches.open(cacheName);\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'read'\r\n    });\r\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (cachedResponse) {\r\n            logger.debug(`Found a cached response in '${cacheName}'.`);\r\n        }\r\n        else {\r\n            logger.debug(`No cached response found in '${cacheName}'.`);\r\n        }\r\n    }\r\n    for (const plugin of plugins) {\r\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\r\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\r\n            cachedResponse = await pluginMethod.call(plugin, {\r\n                cacheName,\r\n                event,\r\n                matchOptions,\r\n                cachedResponse,\r\n                request: effectiveRequest,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachedResponse) {\r\n                    assert.isInstance(cachedResponse, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cachedResponse;\r\n};\r\n/**\r\n * Wrapper around cache.put().\r\n *\r\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\r\n * `matchOptions` when determining what the old entry is.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @param {Object} [options.matchOptions]\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (request.method && request.method !== 'GET') {\r\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\r\n                url: getFriendlyURL(request.url),\r\n                method: request.method,\r\n            });\r\n        }\r\n    }\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'write'\r\n    });\r\n    if (!response) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Cannot cache non-existent response for ` +\r\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\r\n        }\r\n        throw new WorkboxError('cache-put-with-no-response', {\r\n            url: getFriendlyURL(effectiveRequest.url),\r\n        });\r\n    }\r\n    const responseToCache = await _isResponseSafeToCache({\r\n        event,\r\n        plugins,\r\n        response,\r\n        request: effectiveRequest,\r\n    });\r\n    if (!responseToCache) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\r\n                `not be cached.`, responseToCache);\r\n        }\r\n        return;\r\n    }\r\n    const cache = await self.caches.open(cacheName);\r\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\r\n    const oldResponse = updatePlugins.length > 0 ?\r\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\r\n        null;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\r\n            `${getFriendlyURL(effectiveRequest.url)}.`);\r\n    }\r\n    try {\r\n        await cache.put(effectiveRequest, responseToCache);\r\n    }\r\n    catch (error) {\r\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\r\n        if (error.name === 'QuotaExceededError') {\r\n            await executeQuotaErrorCallbacks();\r\n        }\r\n        throw error;\r\n    }\r\n    for (const plugin of updatePlugins) {\r\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\r\n            cacheName,\r\n            event,\r\n            oldResponse,\r\n            newResponse: responseToCache,\r\n            request: effectiveRequest,\r\n        });\r\n    }\r\n};\r\nexport const cacheWrapper = {\r\n    put: putWrapper,\r\n    match: matchWrapper,\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A helper function that prevents a promise from being flagged as unused.\r\n *\r\n * @private\r\n **/\r\nexport function dontWaitFor(promise) {\r\n    // Effective no-op.\r\n    promise.then(() => { });\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\r\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\r\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\r\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\r\nexport default function _slicedToArray(arr, i) {\r\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\r\n}","export default function _arrayWithHoles(arr) {\r\n  if (Array.isArray(arr)) return arr;\r\n}","export default function _iterableToArrayLimit(arr, i) {\r\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\r\n  var _arr = [];\r\n  var _n = true;\r\n  var _d = false;\r\n  var _e = undefined;\r\n\r\n  try {\r\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\r\n      _arr.push(_s.value);\r\n\r\n      if (i && _arr.length === i) break;\r\n    }\r\n  } catch (err) {\r\n    _d = true;\r\n    _e = err;\r\n  } finally {\r\n    try {\r\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\r\n    } finally {\r\n      if (_d) throw _e;\r\n    }\r\n  }\r\n\r\n  return _arr;\r\n}","export default function _nonIterableRest() {\r\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}","function _defineProperties(target, props) {\r\n  for (var i = 0; i < props.length; i++) {\r\n    var descriptor = props[i];\r\n    descriptor.enumerable = descriptor.enumerable || false;\r\n    descriptor.configurable = true;\r\n    if (\"value\" in descriptor) descriptor.writable = true;\r\n    Object.defineProperty(target, descriptor.key, descriptor);\r\n  }\r\n}\r\n\r\nexport default function _createClass(Constructor, protoProps, staticProps) {\r\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n  if (staticProps) _defineProperties(Constructor, staticProps);\r\n  return Constructor;\r\n}","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A class that wraps common IndexedDB functionality in a promise-based API.\r\n * It exposes all the underlying power and functionality of IndexedDB, but\r\n * wraps the most commonly used features in a way that's much simpler to use.\r\n *\r\n * @private\r\n */\r\nexport class DBWrapper {\r\n    /**\r\n     * @param {string} name\r\n     * @param {number} version\r\n     * @param {Object=} [callback]\r\n     * @param {!Function} [callbacks.onupgradeneeded]\r\n     * @param {!Function} [callbacks.onversionchange] Defaults to\r\n     *     DBWrapper.prototype._onversionchange when not specified.\r\n     * @private\r\n     */\r\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\r\n        this._db = null;\r\n        this._name = name;\r\n        this._version = version;\r\n        this._onupgradeneeded = onupgradeneeded;\r\n        this._onversionchange = onversionchange || (() => this.close());\r\n    }\r\n    /**\r\n     * Returns the IDBDatabase instance (not normally needed).\r\n     * @return {IDBDatabase|undefined}\r\n     *\r\n     * @private\r\n     */\r\n    get db() {\r\n        return this._db;\r\n    }\r\n    /**\r\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\r\n     * callback, and added an onversionchange callback to the database.\r\n     *\r\n     * @return {IDBDatabase}\r\n     * @private\r\n     */\r\n    async open() {\r\n        if (this._db)\r\n            return;\r\n        this._db = await new Promise((resolve, reject) => {\r\n            // This flag is flipped to true if the timeout callback runs prior\r\n            // to the request failing or succeeding. Note: we use a timeout instead\r\n            // of an onblocked handler since there are cases where onblocked will\r\n            // never never run. A timeout better handles all possible scenarios:\r\n            // https://github.com/w3c/IndexedDB/issues/223\r\n            let openRequestTimedOut = false;\r\n            setTimeout(() => {\r\n                openRequestTimedOut = true;\r\n                reject(new Error('The open request was blocked and timed out'));\r\n            }, this.OPEN_TIMEOUT);\r\n            const openRequest = indexedDB.open(this._name, this._version);\r\n            openRequest.onerror = () => reject(openRequest.error);\r\n            openRequest.onupgradeneeded = (evt) => {\r\n                if (openRequestTimedOut) {\r\n                    openRequest.transaction.abort();\r\n                    openRequest.result.close();\r\n                }\r\n                else if (typeof this._onupgradeneeded === 'function') {\r\n                    this._onupgradeneeded(evt);\r\n                }\r\n            };\r\n            openRequest.onsuccess = () => {\r\n                const db = openRequest.result;\r\n                if (openRequestTimedOut) {\r\n                    db.close();\r\n                }\r\n                else {\r\n                    db.onversionchange = this._onversionchange.bind(this);\r\n                    resolve(db);\r\n                }\r\n            };\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Polyfills the native `getKey()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getKey(storeName, query) {\r\n        return (await this.getAllKeys(storeName, query, 1))[0];\r\n    }\r\n    /**\r\n     * Polyfills the native `getAll()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAll(storeName, query, count) {\r\n        return await this.getAllMatching(storeName, { query, count });\r\n    }\r\n    /**\r\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\r\n     * runtime if the browser supports the native method.\r\n     *\r\n     * @param {string} storeName\r\n     * @param {*} query\r\n     * @param {number} count\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllKeys(storeName, query, count) {\r\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\r\n        return entries.map((entry) => entry.key);\r\n    }\r\n    /**\r\n     * Supports flexible lookup in an object store by specifying an index,\r\n     * query, direction, and count. This method returns an array of objects\r\n     * with the signature .\r\n     *\r\n     * @param {string} storeName\r\n     * @param {Object} [opts]\r\n     * @param {string} [opts.index] The index to use (if specified).\r\n     * @param {*} [opts.query]\r\n     * @param {IDBCursorDirection} [opts.direction]\r\n     * @param {number} [opts.count] The max number of results to return.\r\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\r\n     *     returned objects is changed from an array of values to an array of\r\n     *     objects in the form {key, primaryKey, value}.\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\r\n    direction = 'next', count, includeKeys = false, } = {}) {\r\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\r\n            const store = txn.objectStore(storeName);\r\n            const target = index ? store.index(index) : store;\r\n            const results = [];\r\n            const request = target.openCursor(query, direction);\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    results.push(includeKeys ? cursor : cursor.value);\r\n                    if (count && results.length >= count) {\r\n                        done(results);\r\n                    }\r\n                    else {\r\n                        cursor.continue();\r\n                    }\r\n                }\r\n                else {\r\n                    done(results);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Accepts a list of stores, a transaction type, and a callback and\r\n     * performs a transaction. A promise is returned that resolves to whatever\r\n     * value the callback chooses. The callback holds all the transaction logic\r\n     * and is invoked with two arguments:\r\n     *   1. The IDBTransaction object\r\n     *   2. A `done` function, that's used to resolve the promise when\r\n     *      when the transaction is done, if passed a value, the promise is\r\n     *      resolved to that value.\r\n     *\r\n     * @param {Array<string>} storeNames An array of object store names\r\n     *     involved in the transaction.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {!Function} callback\r\n     * @return {*} The result of the transaction ran by the callback.\r\n     * @private\r\n     */\r\n    async transaction(storeNames, type, callback) {\r\n        await this.open();\r\n        return await new Promise((resolve, reject) => {\r\n            const txn = this._db.transaction(storeNames, type);\r\n            txn.onabort = () => reject(txn.error);\r\n            txn.oncomplete = () => resolve();\r\n            callback(txn, (value) => resolve(value));\r\n        });\r\n    }\r\n    /**\r\n     * Delegates async to a native IDBObjectStore method.\r\n     *\r\n     * @param {string} method The method name.\r\n     * @param {string} storeName The object store name.\r\n     * @param {string} type Can be `readonly` or `readwrite`.\r\n     * @param {...*} args The list of args to pass to the native method.\r\n     * @return {*} The result of the transaction.\r\n     * @private\r\n     */\r\n    async _call(method, storeName, type, ...args) {\r\n        const callback = (txn, done) => {\r\n            const objStore = txn.objectStore(storeName);\r\n            // TODO(philipwalton): Fix this underlying TS2684 error.\r\n            // @ts-ignore\r\n            const request = objStore[method].apply(objStore, args);\r\n            request.onsuccess = () => done(request.result);\r\n        };\r\n        return await this.transaction([storeName], type, callback);\r\n    }\r\n    /**\r\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\r\n     * doesn't need to be called since:\r\n     *   1. It's usually better to keep a connection open since opening\r\n     *      a new connection is somewhat slow.\r\n     *   2. Connections are automatically closed when the reference is\r\n     *      garbage collected.\r\n     * The primary use case for needing to close a connection is when another\r\n     * reference (typically in another tab) needs to upgrade it and would be\r\n     * blocked by the current, open connection.\r\n     *\r\n     * @private\r\n     */\r\n    close() {\r\n        if (this._db) {\r\n            this._db.close();\r\n            this._db = null;\r\n        }\r\n    }\r\n}\r\n// Exposed on the prototype to let users modify the default timeout on a\r\n// per-instance or global basis.\r\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\r\n// Wrap native IDBObjectStore methods according to their mode.\r\nconst methodsToWrap = {\r\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\r\n    readwrite: ['add', 'put', 'clear', 'delete'],\r\n};\r\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\r\n    for (const method of methods) {\r\n        if (method in IDBObjectStore.prototype) {\r\n            // Don't use arrow functions here since we're outside of the class.\r\n            DBWrapper.prototype[method] =\r\n                async function (storeName, ...args) {\r\n                    return await this._call(method, storeName, mode, ...args);\r\n                };\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Deletes the database.\r\n * Note: this is exported separately from the DBWrapper module because most\r\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\r\n * reused in tests to delete databases without creating DBWrapper instances.\r\n *\r\n * @param {string} name The database name.\r\n * @private\r\n */\r\nexport const deleteDatabase = async (name) => {\r\n    await new Promise((resolve, reject) => {\r\n        const request = indexedDB.deleteDatabase(name);\r\n        request.onerror = () => {\r\n            reject(request.error);\r\n        };\r\n        request.onblocked = () => {\r\n            reject(new Error('Delete blocked'));\r\n        };\r\n        request.onsuccess = () => {\r\n            resolve();\r\n        };\r\n    });\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport { logger } from './logger.js';\r\nimport { assert } from './assert.js';\r\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport '../_version.js';\r\n/**\r\n * Wrapper around the fetch API.\r\n *\r\n * Will call requestWillFetch on available plugins.\r\n *\r\n * @param {Object} options\r\n * @param {Request|string} options.request\r\n * @param {Object} [options.fetchOptions]\r\n * @param {ExtendableEvent} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\r\n    if (typeof request === 'string') {\r\n        request = new Request(request);\r\n    }\r\n    // We *should* be able to call `await event.preloadResponse` even if it's\r\n    // undefined, but for some reason, doing so leads to errors in our Node unit\r\n    // tests. To work around that, explicitly check preloadResponse's value first.\r\n    if (event instanceof FetchEvent && event.preloadResponse) {\r\n        const possiblePreloadResponse = await event.preloadResponse;\r\n        if (possiblePreloadResponse) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`Using a preloaded navigation response for ` +\r\n                    `'${getFriendlyURL(request.url)}'`);\r\n            }\r\n            return possiblePreloadResponse;\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isInstance(request, Request, {\r\n            paramName: 'request',\r\n            expectedClass: Request,\r\n            moduleName: 'workbox-core',\r\n            className: 'fetchWrapper',\r\n            funcName: 'wrappedFetch',\r\n        });\r\n    }\r\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\r\n    // If there is a fetchDidFail plugin, we need to save a clone of the\r\n    // original request before it's either modified by a requestWillFetch\r\n    // plugin or before the original request's body is consumed via fetch().\r\n    const originalRequest = failedFetchPlugins.length > 0 ?\r\n        request.clone() : null;\r\n    try {\r\n        for (const plugin of plugins) {\r\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\r\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\r\n                const requestClone = request.clone();\r\n                request = await pluginMethod.call(plugin, {\r\n                    request: requestClone,\r\n                    event,\r\n                });\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (request) {\r\n                        assert.isInstance(request, Request, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        throw new WorkboxError('plugin-error-request-will-fetch', {\r\n            thrownError: err,\r\n        });\r\n    }\r\n    // The request can be altered by plugins with `requestWillFetch` making\r\n    // the original request (Most likely from a `fetch` event) to be different\r\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\r\n    const pluginFilteredRequest = request.clone();\r\n    try {\r\n        let fetchResponse;\r\n        // See https://github.com/GoogleChrome/workbox/issues/1796\r\n        if (request.mode === 'navigate') {\r\n            fetchResponse = await fetch(request);\r\n        }\r\n        else {\r\n            fetchResponse = await fetch(request, fetchOptions);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\r\n                `status '${fetchResponse.status}'.`);\r\n        }\r\n        for (const plugin of plugins) {\r\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\r\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\r\n                    .call(plugin, {\r\n                    event,\r\n                    request: pluginFilteredRequest,\r\n                    response: fetchResponse,\r\n                });\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (fetchResponse) {\r\n                        assert.isInstance(fetchResponse, Response, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return fetchResponse;\r\n    }\r\n    catch (error) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\r\n        }\r\n        for (const plugin of failedFetchPlugins) {\r\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\r\n                error,\r\n                event,\r\n                originalRequest: originalRequest.clone(),\r\n                request: pluginFilteredRequest.clone(),\r\n            });\r\n        }\r\n        throw error;\r\n    }\r\n};\r\nconst fetchWrapper = {\r\n    fetch: wrappedFetch,\r\n};\r\nexport { fetchWrapper };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof module:workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream() ?\r\n        clonedResponse.body : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\r\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\r\nimport '../_version.js';\r\nconst DB_NAME = 'workbox-expiration';\r\nconst OBJECT_STORE_NAME = 'cache-entries';\r\nconst normalizeURL = (unNormalizedUrl) => {\r\n    const url = new URL(unNormalizedUrl, location.href);\r\n    url.hash = '';\r\n    return url.href;\r\n};\r\n/**\r\n * Returns the timestamp model.\r\n *\r\n * @private\r\n */\r\nclass CacheTimestampsModel {\r\n    /**\r\n     *\r\n     * @param {string} cacheName\r\n     *\r\n     * @private\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheName;\r\n        this._db = new DBWrapper(DB_NAME, 1, {\r\n            onupgradeneeded: (event) => this._handleUpgrade(event),\r\n        });\r\n    }\r\n    /**\r\n     * Should perform an upgrade of indexedDB.\r\n     *\r\n     * @param {Event} event\r\n     *\r\n     * @private\r\n     */\r\n    _handleUpgrade(event) {\r\n        const db = event.target.result;\r\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\r\n        // have to use the `id` keyPath here and create our own values (a\r\n        // concatenation of `url + cacheName`) instead of simply using\r\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\r\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\r\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\r\n        // instead of doing both these indexes.\r\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\r\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        // Previous versions of `workbox-expiration` used `this._cacheName`\r\n        // as the IDBDatabase name.\r\n        deleteDatabase(this._cacheName);\r\n    }\r\n    /**\r\n     * @param {string} url\r\n     * @param {number} timestamp\r\n     *\r\n     * @private\r\n     */\r\n    async setTimestamp(url, timestamp) {\r\n        url = normalizeURL(url);\r\n        const entry = {\r\n            url,\r\n            timestamp,\r\n            cacheName: this._cacheName,\r\n            // Creating an ID from the URL and cache name won't be necessary once\r\n            // Edge switches to Chromium and all browsers we support work with\r\n            // array keyPaths.\r\n            id: this._getId(url),\r\n        };\r\n        await this._db.put(OBJECT_STORE_NAME, entry);\r\n    }\r\n    /**\r\n     * Returns the timestamp stored for a given URL.\r\n     *\r\n     * @param {string} url\r\n     * @return {number}\r\n     *\r\n     * @private\r\n     */\r\n    async getTimestamp(url) {\r\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\r\n        return entry.timestamp;\r\n    }\r\n    /**\r\n     * Iterates through all the entries in the object store (from newest to\r\n     * oldest) and removes entries once either `maxCount` is reached or the\r\n     * entry's timestamp is less than `minTimestamp`.\r\n     *\r\n     * @param {number} minTimestamp\r\n     * @param {number} maxCount\r\n     * @return {Array<string>}\r\n     *\r\n     * @private\r\n     */\r\n    async expireEntries(minTimestamp, maxCount) {\r\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\r\n            const store = txn.objectStore(OBJECT_STORE_NAME);\r\n            const request = store.index('timestamp').openCursor(null, 'prev');\r\n            const entriesToDelete = [];\r\n            let entriesNotDeletedCount = 0;\r\n            request.onsuccess = () => {\r\n                const cursor = request.result;\r\n                if (cursor) {\r\n                    const result = cursor.value;\r\n                    // TODO(philipwalton): once we can use a multi-key index, we\r\n                    // won't have to check `cacheName` here.\r\n                    if (result.cacheName === this._cacheName) {\r\n                        // Delete an entry if it's older than the max age or\r\n                        // if we already have the max number allowed.\r\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\r\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\r\n                            // TODO(philipwalton): we should be able to delete the\r\n                            // entry right here, but doing so causes an iteration\r\n                            // bug in Safari stable (fixed in TP). Instead we can\r\n                            // store the keys of the entries to delete, and then\r\n                            // delete the separate transactions.\r\n                            // https://github.com/GoogleChrome/workbox/issues/1978\r\n                            // cursor.delete();\r\n                            // We only need to return the URL, not the whole entry.\r\n                            entriesToDelete.push(cursor.value);\r\n                        }\r\n                        else {\r\n                            entriesNotDeletedCount++;\r\n                        }\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    done(entriesToDelete);\r\n                }\r\n            };\r\n        });\r\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\r\n        // we should be able to remove this loop and do the entry deletion in the\r\n        // cursor loop above:\r\n        // https://github.com/GoogleChrome/workbox/issues/1978\r\n        const urlsDeleted = [];\r\n        for (const entry of entriesToDelete) {\r\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\r\n            urlsDeleted.push(entry.url);\r\n        }\r\n        return urlsDeleted;\r\n    }\r\n    /**\r\n     * Takes a URL and returns an ID that will be unique in the object store.\r\n     *\r\n     * @param {string} url\r\n     * @return {string}\r\n     *\r\n     * @private\r\n     */\r\n    _getId(url) {\r\n        // Creating an ID from the URL and cache name won't be necessary once\r\n        // Edge switches to Chromium and all browsers we support work with\r\n        // array keyPaths.\r\n        return this._cacheName + '|' + normalizeURL(url);\r\n    }\r\n}\r\nexport { CacheTimestampsModel };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\r\nimport './_version.js';\r\n/**\r\n * The `CacheExpiration` class allows you define an expiration and / or\r\n * limit on the number of responses stored in a\r\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\r\n *\r\n * @memberof module:workbox-expiration\r\n */\r\nclass CacheExpiration {\r\n    /**\r\n     * To construct a new CacheExpiration instance you must provide at least\r\n     * one of the `config` properties.\r\n     *\r\n     * @param {string} cacheName Name of the cache to apply restrictions to.\r\n     * @param {Object} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     */\r\n    constructor(cacheName, config = {}) {\r\n        this._isRunning = false;\r\n        this._rerunRequested = false;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(cacheName, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'constructor',\r\n                paramName: 'cacheName',\r\n            });\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n                // TODO: Assert is positive\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'CacheExpiration',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n                // TODO: Assert is positive\r\n            }\r\n        }\r\n        this._maxEntries = config.maxEntries;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._cacheName = cacheName;\r\n        this._timestampModel = new CacheTimestampsModel(cacheName);\r\n    }\r\n    /**\r\n     * Expires entries for the given cache and given criteria.\r\n     */\r\n    async expireEntries() {\r\n        if (this._isRunning) {\r\n            this._rerunRequested = true;\r\n            return;\r\n        }\r\n        this._isRunning = true;\r\n        const minTimestamp = this._maxAgeSeconds ?\r\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\r\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\r\n        // Delete URLs from the cache\r\n        const cache = await self.caches.open(this._cacheName);\r\n        for (const url of urlsExpired) {\r\n            await cache.delete(url);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (urlsExpired.length > 0) {\r\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\r\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\r\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\r\n                    `'${this._cacheName}' cache.`);\r\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\r\n                    'URL' : 'URLs'}:`);\r\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\r\n                logger.groupEnd();\r\n            }\r\n            else {\r\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\r\n            }\r\n        }\r\n        this._isRunning = false;\r\n        if (this._rerunRequested) {\r\n            this._rerunRequested = false;\r\n            dontWaitFor(this.expireEntries());\r\n        }\r\n    }\r\n    /**\r\n     * Update the timestamp for the given URL. This ensures the when\r\n     * removing entries based on maximum entries, most recently used\r\n     * is accurate or when expiring, the timestamp is up-to-date.\r\n     *\r\n     * @param {string} url\r\n     */\r\n    async updateTimestamp(url) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(url, 'string', {\r\n                moduleName: 'workbox-expiration',\r\n                className: 'CacheExpiration',\r\n                funcName: 'updateTimestamp',\r\n                paramName: 'url',\r\n            });\r\n        }\r\n        await this._timestampModel.setTimestamp(url, Date.now());\r\n    }\r\n    /**\r\n     * Can be used to check if a URL has expired or not before it's used.\r\n     *\r\n     * This requires a look up from IndexedDB, so can be slow.\r\n     *\r\n     * Note: This method will not remove the cached entry, call\r\n     * `expireEntries()` to remove indexedDB and Cache entries.\r\n     *\r\n     * @param {string} url\r\n     * @return {boolean}\r\n     */\r\n    async isURLExpired(url) {\r\n        if (!this._maxAgeSeconds) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                throw new WorkboxError(`expired-test-without-max-age`, {\r\n                    methodName: 'isURLExpired',\r\n                    paramName: 'maxAgeSeconds',\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            const timestamp = await this._timestampModel.getTimestamp(url);\r\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\r\n            return (timestamp < expireOlderThan);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the IndexedDB object store used to keep track of cache expiration\r\n     * metadata.\r\n     */\r\n    async delete() {\r\n        // Make sure we don't attempt another rerun if we're called in the middle of\r\n        // a cache expiration.\r\n        this._rerunRequested = false;\r\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\r\n    }\r\n}\r\nexport { CacheExpiration };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { CacheExpiration } from './CacheExpiration.js';\r\nimport './_version.js';\r\n/**\r\n * This plugin can be used in the Workbox APIs to regularly enforce a\r\n * limit on the age and / or the number of cached requests.\r\n *\r\n * Whenever a cached request is used or updated, this plugin will look\r\n * at the used Cache and remove any old or extra requests.\r\n *\r\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\r\n * because the expiration clean up will not have occurred until *after* the\r\n * cached request has been used. If the request has a \"Date\" header, then\r\n * a light weight expiration check is performed and the request will not be\r\n * used immediately.\r\n *\r\n * When using `maxEntries`, the entry least-recently requested will be removed\r\n * from the cache first.\r\n *\r\n * @memberof module:workbox-expiration\r\n */\r\nclass ExpirationPlugin {\r\n    /**\r\n     * @param {Object} config\r\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\r\n     * Entries used the least will be removed as the maximum is reached.\r\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\r\n     * it's treated as stale and removed.\r\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\r\n     * automatic deletion if the available storage quota has been exceeded.\r\n     */\r\n    constructor(config = {}) {\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when a `Response` is about to be returned\r\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\r\n         * the handler. It allows the `Response` to be inspected for freshness and\r\n         * prevents it from being used if the `Response`'s `Date` header value is\r\n         * older than the configured `maxAgeSeconds`.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache the response is in.\r\n         * @param {Response} options.cachedResponse The `Response` object that's been\r\n         *     read from a cache and whose freshness should be checked.\r\n         * @return {Response} Either the `cachedResponse`, if it's\r\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\r\n         *\r\n         * @private\r\n         */\r\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\r\n            if (!cachedResponse) {\r\n                return null;\r\n            }\r\n            const isFresh = this._isResponseDateFresh(cachedResponse);\r\n            // Expire entries to ensure that even if the expiration date has\r\n            // expired, it'll only be used once.\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            dontWaitFor(cacheExpiration.expireEntries());\r\n            // Update the metadata for the request URL to the current timestamp,\r\n            // but don't `await` it as we don't want to block the response.\r\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\r\n            if (event) {\r\n                try {\r\n                    event.waitUntil(updateTimestampDone);\r\n                }\r\n                catch (error) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // The event may not be a fetch event; only log the URL if it is.\r\n                        if ('request' in event) {\r\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                                `updating cache entry for ` +\r\n                                `'${getFriendlyURL(event.request.url)}'.`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return isFresh ? cachedResponse : null;\r\n        };\r\n        /**\r\n         * A \"lifecycle\" callback that will be triggered automatically by the\r\n         * `workbox-strategies` handlers when an entry is added to a cache.\r\n         *\r\n         * @param {Object} options\r\n         * @param {string} options.cacheName Name of the cache that was updated.\r\n         * @param {string} options.request The Request for the cached entry.\r\n         *\r\n         * @private\r\n         */\r\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                assert.isType(cacheName, 'string', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'cacheName',\r\n                });\r\n                assert.isInstance(request, Request, {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'cacheDidUpdate',\r\n                    paramName: 'request',\r\n                });\r\n            }\r\n            const cacheExpiration = this._getCacheExpiration(cacheName);\r\n            await cacheExpiration.updateTimestamp(request.url);\r\n            await cacheExpiration.expireEntries();\r\n        };\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\r\n                throw new WorkboxError('max-entries-or-age-required', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.maxEntries) {\r\n                assert.isType(config.maxEntries, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxEntries',\r\n                });\r\n            }\r\n            if (config.maxAgeSeconds) {\r\n                assert.isType(config.maxAgeSeconds, 'number', {\r\n                    moduleName: 'workbox-expiration',\r\n                    className: 'Plugin',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.maxAgeSeconds',\r\n                });\r\n            }\r\n        }\r\n        this._config = config;\r\n        this._maxAgeSeconds = config.maxAgeSeconds;\r\n        this._cacheExpirations = new Map();\r\n        if (config.purgeOnQuotaError) {\r\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\r\n        }\r\n    }\r\n    /**\r\n     * A simple helper method to return a CacheExpiration instance for a given\r\n     * cache name.\r\n     *\r\n     * @param {string} cacheName\r\n     * @return {CacheExpiration}\r\n     *\r\n     * @private\r\n     */\r\n    _getCacheExpiration(cacheName) {\r\n        if (cacheName === cacheNames.getRuntimeName()) {\r\n            throw new WorkboxError('expire-custom-caches-only');\r\n        }\r\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\r\n        if (!cacheExpiration) {\r\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\r\n            this._cacheExpirations.set(cacheName, cacheExpiration);\r\n        }\r\n        return cacheExpiration;\r\n    }\r\n    /**\r\n     * @param {Response} cachedResponse\r\n     * @return {boolean}\r\n     *\r\n     * @private\r\n     */\r\n    _isResponseDateFresh(cachedResponse) {\r\n        if (!this._maxAgeSeconds) {\r\n            // We aren't expiring by age, so return true, it's fresh\r\n            return true;\r\n        }\r\n        // Check if the 'date' header will suffice a quick expiration check.\r\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\r\n        // discussion.\r\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\r\n        if (dateHeaderTimestamp === null) {\r\n            // Unable to parse date, so assume it's fresh.\r\n            return true;\r\n        }\r\n        // If we have a valid headerTime, then our response is fresh iff the\r\n        // headerTime plus maxAgeSeconds is greater than the current time.\r\n        const now = Date.now();\r\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\r\n    }\r\n    /**\r\n     * This method will extract the data header and parse it into a useful\r\n     * value.\r\n     *\r\n     * @param {Response} cachedResponse\r\n     * @return {number|null}\r\n     *\r\n     * @private\r\n     */\r\n    _getDateHeaderTimestamp(cachedResponse) {\r\n        if (!cachedResponse.headers.has('date')) {\r\n            return null;\r\n        }\r\n        const dateHeader = cachedResponse.headers.get('date');\r\n        const parsedDate = new Date(dateHeader);\r\n        const headerTime = parsedDate.getTime();\r\n        // If the Date header was invalid for some reason, parsedDate.getTime()\r\n        // will return NaN.\r\n        if (isNaN(headerTime)) {\r\n            return null;\r\n        }\r\n        return headerTime;\r\n    }\r\n    /**\r\n     * This is a helper method that performs two operations:\r\n     *\r\n     * - Deletes *all* the underlying Cache instances associated with this plugin\r\n     * instance, by calling caches.delete() on your behalf.\r\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\r\n     * details for each Cache instance.\r\n     *\r\n     * When using cache expiration, calling this method is preferable to calling\r\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\r\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\r\n     *\r\n     * Note that if you're *not* using cache expiration for a given cache, calling\r\n     * `caches.delete()` and passing in the cache's name should be sufficient.\r\n     * There is no Workbox-specific method needed for cleanup in that case.\r\n     */\r\n    async deleteCacheAndMetadata() {\r\n        // Do this one at a time instead of all at once via `Promise.all()` to\r\n        // reduce the chance of inconsistency if a promise rejects.\r\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\r\n            await self.caches.delete(cacheName);\r\n            await cacheExpiration.delete();\r\n        }\r\n        // Reset this._cacheExpirations to its initial state.\r\n        this._cacheExpirations = new Map();\r\n    }\r\n}\r\nexport { ExpirationPlugin };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst plugins = [];\r\nexport const precachePlugins = {\r\n    /*\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    get() {\r\n        return plugins;\r\n    },\r\n    /*\r\n     * @param {Array} newPlugins\r\n     * @private\r\n     */\r\n    add(newPlugins) {\r\n        plugins.push(...newPlugins);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport '../_version.js';\r\n// Name of the search parameter used to store revision info.\r\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\r\n/**\r\n * Converts a manifest entry into a versioned URL suitable for precaching.\r\n *\r\n * @param {Object|string} entry\r\n * @return {string} A URL with versioning info.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function createCacheKey(entry) {\r\n    if (!entry) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If a precache manifest entry is a string, it's assumed to be a versioned\r\n    // URL, like '/app.abcd1234.js'. Return as-is.\r\n    if (typeof entry === 'string') {\r\n        const urlObject = new URL(entry, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    const { revision, url } = entry;\r\n    if (!url) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If there's just a URL and no revision, then it's also assumed to be a\r\n    // versioned URL.\r\n    if (!revision) {\r\n        const urlObject = new URL(url, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    // Otherwise, construct a properly versioned URL using the custom Workbox\r\n    // search parameter along with the revision info.\r\n    const cacheKeyURL = new URL(url, location.href);\r\n    const originalURL = new URL(url, location.href);\r\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\r\n    return {\r\n        cacheKey: cacheKeyURL.href,\r\n        url: originalURL.href,\r\n    };\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { PrecacheController } from '../PrecacheController.js';\r\nimport '../_version.js';\r\nlet precacheController;\r\n/**\r\n * @return {PrecacheController}\r\n * @private\r\n */\r\nexport const getOrCreatePrecacheController = () => {\r\n    if (!precacheController) {\r\n        precacheController = new PrecacheController();\r\n    }\r\n    return precacheController;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport './_version.js';\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {string} [cacheName] An optional name for the cache, to override\r\n     * the default precache name.\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {\r\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\r\n     * } entries Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\r\n                'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Event} [options.event] The install event (if needed).\r\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\r\n     * and caching during install.\r\n     * @return {Promise<module:workbox-precaching.InstallResult>}\r\n     */\r\n    async install({ event, plugins } = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (plugins) {\r\n                assert.isArray(plugins, {\r\n                    moduleName: 'workbox-precaching',\r\n                    className: 'PrecacheController',\r\n                    funcName: 'install',\r\n                    paramName: 'plugins',\r\n                });\r\n            }\r\n        }\r\n        const toBePrecached = [];\r\n        const alreadyPrecached = [];\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const alreadyCachedRequests = await cache.keys();\r\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\r\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\r\n            if (existingCacheKeys.has(cacheKey)) {\r\n                alreadyPrecached.push(url);\r\n            }\r\n            else {\r\n                toBePrecached.push({ cacheKey, url });\r\n            }\r\n        }\r\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\r\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n            const cacheMode = this._urlsToCacheModes.get(url);\r\n            return this._addURLToCache({\r\n                cacheKey,\r\n                cacheMode,\r\n                event,\r\n                integrity,\r\n                plugins,\r\n                url,\r\n            });\r\n        });\r\n        await Promise.all(precacheRequests);\r\n        const updatedURLs = toBePrecached.map((item) => item.url);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printInstallDetails(updatedURLs, alreadyPrecached);\r\n        }\r\n        return {\r\n            updatedURLs,\r\n            notUpdatedURLs: alreadyPrecached,\r\n        };\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\r\n     */\r\n    async activate() {\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const currentlyCachedRequests = await cache.keys();\r\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n        const deletedURLs = [];\r\n        for (const request of currentlyCachedRequests) {\r\n            if (!expectedCacheKeys.has(request.url)) {\r\n                await cache.delete(request);\r\n                deletedURLs.push(request.url);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printCleanupDetails(deletedURLs);\r\n        }\r\n        return { deletedURLs };\r\n    }\r\n    /**\r\n     * Requests the entry and saves it to the cache if the response is valid.\r\n     * By default, any response with a status code of less than 400 (including\r\n     * opaque responses) is considered valid.\r\n     *\r\n     * If you need to use custom criteria to determine what's valid and what\r\n     * isn't, then pass in an item in `options.plugins` that implements the\r\n     * `cacheWillUpdate()` lifecycle event.\r\n     *\r\n     * @private\r\n     * @param {Object} options\r\n     * @param {string} options.cacheKey The string to use a cache key.\r\n     * @param {string} options.url The URL to fetch and cache.\r\n     * @param {string} [options.cacheMode] The cache mode for the network request.\r\n     * @param {Event} [options.event] The install event (if passed).\r\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\r\n     * fetch and caching.\r\n     * @param {string} [options.integrity] The value to use for the `integrity`\r\n     * field when making the request.\r\n     */\r\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\r\n        const request = new Request(url, {\r\n            integrity,\r\n            cache: cacheMode,\r\n            credentials: 'same-origin',\r\n        });\r\n        let response = await fetchWrapper.fetch({\r\n            event,\r\n            plugins,\r\n            request,\r\n        });\r\n        // Allow developers to override the default logic about what is and isn't\r\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\r\n        // a `CacheableResponsePlugin` instance.\r\n        let cacheWillUpdatePlugin;\r\n        for (const plugin of (plugins || [])) {\r\n            if ('cacheWillUpdate' in plugin) {\r\n                cacheWillUpdatePlugin = plugin;\r\n            }\r\n        }\r\n        const isValidResponse = cacheWillUpdatePlugin ?\r\n            // Use a callback if provided. It returns a truthy value if valid.\r\n            // NOTE: invoke the method on the plugin instance so the `this` context\r\n            // is correct.\r\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\r\n            // Otherwise, default to considering any response status under 400 valid.\r\n            // This includes, by default, considering opaque responses valid.\r\n            response.status < 400;\r\n        // Consider this a failure, leading to the `install` handler failing, if\r\n        // we get back an invalid response.\r\n        if (!isValidResponse) {\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        if (response.redirected) {\r\n            response = await copyResponse(response);\r\n        }\r\n        await cacheWrapper.put({\r\n            event,\r\n            plugins,\r\n            response,\r\n            // `request` already uses `url`. We may be able to reuse it.\r\n            request: cacheKey === url ? request : new Request(cacheKey),\r\n            cacheName: this._cacheName,\r\n            matchOptions: {\r\n                ignoreSearch: true,\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this._cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that can be used within a\r\n     * {@link module:workbox-routing.Route} that will find a response for the\r\n     * incoming request against the precache.\r\n     *\r\n     * If for an unexpected reason there is a cache miss for the request,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandler(fallbackToNetwork = true) {\r\n        return async ({ request }) => {\r\n            try {\r\n                const response = await this.matchPrecache(request);\r\n                if (response) {\r\n                    return response;\r\n                }\r\n                // This shouldn't normally happen, but there are edge cases:\r\n                // https://github.com/GoogleChrome/workbox/issues/1441\r\n                throw new WorkboxError('missing-precache-entry', {\r\n                    cacheName: this._cacheName,\r\n                    url: request instanceof Request ? request.url : request,\r\n                });\r\n            }\r\n            catch (error) {\r\n                if (fallbackToNetwork) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        logger.debug(`Unable to respond with precached response. ` +\r\n                            `Falling back to network.`, error);\r\n                    }\r\n                    return fetch(request);\r\n                }\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * If for an unexpected reason there is a cache miss when looking up `url`,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        const handler = this.createHandler(fallbackToNetwork);\r\n        const request = new Request(url);\r\n        return () => handler({ request });\r\n    }\r\n}\r\nexport { PrecacheController };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\r\nimport { generateURLVariations } from './generateURLVariations.js';\r\nimport '../_version.js';\r\n/**\r\n * This function will take the request URL and manipulate it based on the\r\n * configuration options.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n * @return {string} Returns the URL in the cache that matches the request,\r\n * if possible.\r\n *\r\n * @private\r\n */\r\nexport const getCacheKeyForURL = (url, options) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n    for (const possibleURL of generateURLVariations(url, options)) {\r\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\r\n        if (possibleCacheKey) {\r\n            return possibleCacheKey;\r\n        }\r\n    }\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addFetchListener } from './utils/addFetchListener.js';\r\nimport './_version.js';\r\nlet listenerAdded = false;\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    if (!listenerAdded) {\r\n        addFetchListener(options);\r\n        listenerAdded = true;\r\n    }\r\n}\r\nexport { addRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\r\nimport '../_version.js';\r\n/**\r\n * Adds a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * NOTE: when called more than once this method will replace the previously set\r\n * configuration options. Calling it more than once is not recommended outside\r\n * of tests.\r\n *\r\n * @private\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n */\r\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\r\n    const cacheName = cacheNames.getPrecacheName();\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('fetch', ((event) => {\r\n        const precachedURL = getCacheKeyForURL(event.request.url, {\r\n            cleanURLs,\r\n            directoryIndex,\r\n            ignoreURLParametersMatching,\r\n            urlManipulation,\r\n        });\r\n        if (!precachedURL) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` +\r\n                    getFriendlyURL(event.request.url));\r\n            }\r\n            return;\r\n        }\r\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\r\n            return cache.match(precachedURL);\r\n        }).then((cachedResponse) => {\r\n            if (cachedResponse) {\r\n                return cachedResponse;\r\n            }\r\n            // Fall back to the network if we don't have a cached response\r\n            // (perhaps due to manual cache cleanup).\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\r\n                    `Falling back to the network instead.`);\r\n            }\r\n            return fetch(precachedURL);\r\n        });\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            responsePromise = responsePromise.then((response) => {\r\n                // Workbox is going to handle the route.\r\n                // print the routing details to the console.\r\n                logger.groupCollapsed(`Precaching is responding to: ` +\r\n                    getFriendlyURL(event.request.url));\r\n                logger.log(`Serving the precached url: ${precachedURL}`);\r\n                logger.groupCollapsed(`View request details here.`);\r\n                logger.log(event.request);\r\n                logger.groupEnd();\r\n                logger.groupCollapsed(`View response details here.`);\r\n                logger.log(response);\r\n                logger.groupEnd();\r\n                logger.groupEnd();\r\n                return response;\r\n            });\r\n        }\r\n        event.respondWith(responsePromise);\r\n    }));\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { precachePlugins } from './utils/precachePlugins.js';\r\nimport './_version.js';\r\nconst installListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const plugins = precachePlugins.get();\r\n    event.waitUntil(precacheController.install({ event, plugins })\r\n        .catch((error) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Service worker installation failed. It will ` +\r\n                `be retried automatically during the next navigation.`);\r\n        }\r\n        // Re-throw the error to ensure installation fails.\r\n        throw error;\r\n    }));\r\n};\r\nconst activateListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    event.waitUntil(precacheController.activate());\r\n};\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.addToCacheList(entries);\r\n    if (entries.length > 0) {\r\n        // NOTE: these listeners will only be added once (even if the `precache()`\r\n        // method is called multiple times) because event listeners are implemented\r\n        // as a set, where each listener must be unique.\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('install', installListener);\r\n        self.addEventListener('activate', activateListener);\r\n    }\r\n}\r\nexport { precache };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { Router } from '../Router.js';\r\nimport '../_version.js';\r\nlet defaultRouter;\r\n/**\r\n * Creates a new, singleton Router instance if one does not exist. If one\r\n * does already exist, that instance is returned.\r\n *\r\n * @private\r\n * @return {Router}\r\n */\r\nexport const getOrCreateDefaultRouter = () => {\r\n    if (!defaultRouter) {\r\n        defaultRouter = new Router();\r\n        // The helpers that use the default Router assume these listeners exist.\r\n        defaultRouter.addFetchListener();\r\n        defaultRouter.addCacheListener();\r\n    }\r\n    return defaultRouter;\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport '../_version.js';\r\n/**\r\n * @param {function()|Object} handler Either a function, or an object with a\r\n * 'handle' method.\r\n * @return {Object} An object with a handle method.\r\n *\r\n * @private\r\n */\r\nexport const normalizeHandler = (handler) => {\r\n    if (handler && typeof handler === 'object') {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.hasMethod(handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return handler;\r\n    }\r\n    else {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(handler, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'handler',\r\n            });\r\n        }\r\n        return { handle: handler };\r\n    }\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { defaultMethod, validMethods } from './utils/constants.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\r\n * The \"match\" callback determine if a route should be used to \"handle\" a\r\n * request by returning a non-falsy value if it can. The \"handler\" callback\r\n * is called when there is a match and should return a Promise that resolves\r\n * to a `Response`.\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nclass Route {\r\n    /**\r\n     * Constructor for Route class.\r\n     *\r\n     * @param {module:workbox-routing~matchCallback} match\r\n     * A callback function that determines whether the route matches a given\r\n     * `fetch` event by returning a non-falsy value.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resolving to a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(match, handler, method = defaultMethod) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(match, 'function', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Route',\r\n                funcName: 'constructor',\r\n                paramName: 'match',\r\n            });\r\n            if (method) {\r\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\r\n            }\r\n        }\r\n        // These values are referenced directly by Router so cannot be\r\n        // altered by minificaton.\r\n        this.handler = normalizeHandler(handler);\r\n        this.match = match;\r\n        this.method = method;\r\n    }\r\n}\r\nexport { Route };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * The default HTTP method, 'GET', used when there's no specific method\r\n * configured for a route.\r\n *\r\n * @type {string}\r\n *\r\n * @private\r\n */\r\nexport const defaultMethod = 'GET';\r\n/**\r\n * The list of valid HTTP methods associated with requests that could be routed.\r\n *\r\n * @type {Array<string>}\r\n *\r\n * @private\r\n */\r\nexport const validMethods = [\r\n    'DELETE',\r\n    'GET',\r\n    'HEAD',\r\n    'PATCH',\r\n    'POST',\r\n    'PUT',\r\n];\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * [Route]{@link module:workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\r\n *\r\n * @memberof module:workbox-routing\r\n * @extends module:workbox-routing.Route\r\n */\r\nclass RegExpRoute extends Route {\r\n    /**\r\n     * If the regular expression contains\r\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n     * the captured values will be passed to the\r\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\r\n     * argument.\r\n     *\r\n     * @param {RegExp} regExp The regular expression to match against URLs.\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(regExp, handler, method) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(regExp, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'RegExpRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'pattern',\r\n            });\r\n        }\r\n        const match = ({ url }) => {\r\n            const result = regExp.exec(url.href);\r\n            // Return immediately if there's no match.\r\n            if (!result) {\r\n                return;\r\n            }\r\n            // Require that the match start at the first character in the URL string\r\n            // if it's a cross-origin request.\r\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\r\n            // behind this behavior.\r\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\r\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\r\n                        `handle cross-origin requests if they match the entire URL.`);\r\n                }\r\n                return;\r\n            }\r\n            // If the route matches, but there aren't any capture groups defined, then\r\n            // this will return [], which is truthy and therefore sufficient to\r\n            // indicate a match.\r\n            // If there are capture groups, then it will return their values.\r\n            return result.slice(1);\r\n        };\r\n        super(match, handler, method);\r\n    }\r\n}\r\nexport { RegExpRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { normalizeHandler } from './utils/normalizeHandler.js';\r\nimport './_version.js';\r\n/**\r\n * The Router can be used to process a FetchEvent through one or more\r\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\r\n * a matching route exists.\r\n *\r\n * If no route matches a given a request, the Router will use a \"default\"\r\n * handler if one is defined.\r\n *\r\n * Should the matching Route throw an error, the Router will use a \"catch\"\r\n * handler if one is defined to gracefully deal with issues and respond with a\r\n * Request.\r\n *\r\n * If a request matches multiple routes, the **earliest** registered route will\r\n * be used to respond to the request.\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nclass Router {\r\n    /**\r\n     * Initializes a new Router.\r\n     */\r\n    constructor() {\r\n        this._routes = new Map();\r\n    }\r\n    /**\r\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\r\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\r\n     * instances that are registered.\r\n     */\r\n    get routes() {\r\n        return this._routes;\r\n    }\r\n    /**\r\n     * Adds a fetch event listener to respond to events when a route matches\r\n     * the event's request.\r\n     */\r\n    addFetchListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('fetch', ((event) => {\r\n            const { request } = event;\r\n            const responsePromise = this.handleRequest({ request, event });\r\n            if (responsePromise) {\r\n                event.respondWith(responsePromise);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Adds a message event listener for URLs to cache from the window.\r\n     * This is useful to cache resources loaded on the page prior to when the\r\n     * service worker started controlling it.\r\n     *\r\n     * The format of the message data sent from the window should be as follows.\r\n     * Where the `urlsToCache` array may consist of URL strings or an array of\r\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\r\n     *\r\n     * ```\r\n     * {\r\n     *   type: 'CACHE_URLS',\r\n     *   payload: {\r\n     *     urlsToCache: [\r\n     *       './script1.js',\r\n     *       './script2.js',\r\n     *       ['./script3.js', {mode: 'no-cors'}],\r\n     *     ],\r\n     *   },\r\n     * }\r\n     * ```\r\n     */\r\n    addCacheListener() {\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('message', ((event) => {\r\n            if (event.data && event.data.type === 'CACHE_URLS') {\r\n                const { payload } = event.data;\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\r\n                }\r\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\r\n                    if (typeof entry === 'string') {\r\n                        entry = [entry];\r\n                    }\r\n                    const request = new Request(...entry);\r\n                    return this.handleRequest({ request });\r\n                    // TODO(philipwalton): TypeScript errors without this typecast for\r\n                    // some reason (probably a bug). The real type here should work but\r\n                    // doesn't: `Array<Promise<Response> | undefined>`.\r\n                })); // TypeScript\r\n                event.waitUntil(requestPromises);\r\n                // If a MessageChannel was used, reply to the message on success.\r\n                if (event.ports && event.ports[0]) {\r\n                    requestPromises.then(() => event.ports[0].postMessage(true));\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Apply the routing rules to a FetchEvent object to get a Response from an\r\n     * appropriate Route's handler.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request} options.request The request to handle (this is usually\r\n     *     from a fetch event, but it does not have to be).\r\n     * @param {FetchEvent} [options.event] The event that triggered the request,\r\n     *     if applicable.\r\n     * @return {Promise<Response>|undefined} A promise is returned if a\r\n     *     registered route can handle the request. If there is no matching\r\n     *     route and there's no `defaultHandler`, `undefined` is returned.\r\n     */\r\n    handleRequest({ request, event }) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'handleRequest',\r\n                paramName: 'options.request',\r\n            });\r\n        }\r\n        const url = new URL(request.url, location.href);\r\n        if (!url.protocol.startsWith('http')) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\r\n            }\r\n            return;\r\n        }\r\n        const { params, route } = this.findMatchingRoute({ url, request, event });\r\n        let handler = route && route.handler;\r\n        const debugMessages = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (handler) {\r\n                debugMessages.push([\r\n                    `Found a route to handle this request:`, route,\r\n                ]);\r\n                if (params) {\r\n                    debugMessages.push([\r\n                        `Passing the following params to the route's handler:`, params,\r\n                    ]);\r\n                }\r\n            }\r\n        }\r\n        // If we don't have a handler because there was no matching route, then\r\n        // fall back to defaultHandler if that's defined.\r\n        if (!handler && this._defaultHandler) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                debugMessages.push(`Failed to find a matching route. Falling ` +\r\n                    `back to the default handler.`);\r\n            }\r\n            handler = this._defaultHandler;\r\n        }\r\n        if (!handler) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                // No handler so Workbox will do nothing. If logs is set of debug\r\n                // i.e. verbose, we should print out this information.\r\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\r\n            }\r\n            return;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            // We have a handler, meaning Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\r\n            debugMessages.forEach((msg) => {\r\n                if (Array.isArray(msg)) {\r\n                    logger.log(...msg);\r\n                }\r\n                else {\r\n                    logger.log(msg);\r\n                }\r\n            });\r\n            logger.groupEnd();\r\n        }\r\n        // Wrap in try and catch in case the handle method throws a synchronous\r\n        // error. It should still callback to the catch handler.\r\n        let responsePromise;\r\n        try {\r\n            responsePromise = handler.handle({ url, request, event, params });\r\n        }\r\n        catch (err) {\r\n            responsePromise = Promise.reject(err);\r\n        }\r\n        if (responsePromise instanceof Promise && this._catchHandler) {\r\n            responsePromise = responsePromise.catch((err) => {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    // Still include URL here as it will be async from the console group\r\n                    // and may not make sense without the URL\r\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\r\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\r\n                    logger.error(`Error thrown by:`, route);\r\n                    logger.error(err);\r\n                    logger.groupEnd();\r\n                }\r\n                return this._catchHandler.handle({ url, request, event });\r\n            });\r\n        }\r\n        return responsePromise;\r\n    }\r\n    /**\r\n     * Checks a request and URL (and optionally an event) against the list of\r\n     * registered routes, and if there's a match, returns the corresponding\r\n     * route along with any params generated by the match.\r\n     *\r\n     * @param {Object} options\r\n     * @param {URL} options.url\r\n     * @param {Request} options.request The request to match.\r\n     * @param {Event} [options.event] The corresponding event (unless N/A).\r\n     * @return {Object} An object with `route` and `params` properties.\r\n     *     They are populated if a matching route was found or `undefined`\r\n     *     otherwise.\r\n     */\r\n    findMatchingRoute({ url, request, event }) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(url, URL, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'findMatchingRoute',\r\n                paramName: 'options.url',\r\n            });\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'findMatchingRoute',\r\n                paramName: 'options.request',\r\n            });\r\n        }\r\n        const routes = this._routes.get(request.method) || [];\r\n        for (const route of routes) {\r\n            let params;\r\n            const matchResult = route.match({ url, request, event });\r\n            if (matchResult) {\r\n                // See https://github.com/GoogleChrome/workbox/issues/2079\r\n                params = matchResult;\r\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\r\n                    // Instead of passing an empty array in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if ((matchResult.constructor === Object &&\r\n                    Object.keys(matchResult).length === 0)) {\r\n                    // Instead of passing an empty object in as params, use undefined.\r\n                    params = undefined;\r\n                }\r\n                else if (typeof matchResult === 'boolean') {\r\n                    // For the boolean value true (rather than just something truth-y),\r\n                    // don't set params.\r\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\r\n                    params = undefined;\r\n                }\r\n                // Return early if have a match.\r\n                return { route, params };\r\n            }\r\n        }\r\n        // If no match was found above, return and empty object.\r\n        return {};\r\n    }\r\n    /**\r\n     * Define a default `handler` that's called when no routes explicitly\r\n     * match the incoming request.\r\n     *\r\n     * Without a default handler, unmatched requests will go against the\r\n     * network as if there were no service worker present.\r\n     *\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     */\r\n    setDefaultHandler(handler) {\r\n        this._defaultHandler = normalizeHandler(handler);\r\n    }\r\n    /**\r\n     * If a Route throws an error while handling a request, this `handler`\r\n     * will be called and given a chance to provide a response.\r\n     *\r\n     * @param {module:workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     */\r\n    setCatchHandler(handler) {\r\n        this._catchHandler = normalizeHandler(handler);\r\n    }\r\n    /**\r\n     * Registers a route with the router.\r\n     *\r\n     * @param {module:workbox-routing.Route} route The route to register.\r\n     */\r\n    registerRoute(route) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isType(route, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route, 'match', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.isType(route.handler, 'object', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route',\r\n            });\r\n            assert.hasMethod(route.handler, 'handle', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.handler',\r\n            });\r\n            assert.isType(route.method, 'string', {\r\n                moduleName: 'workbox-routing',\r\n                className: 'Router',\r\n                funcName: 'registerRoute',\r\n                paramName: 'route.method',\r\n            });\r\n        }\r\n        if (!this._routes.has(route.method)) {\r\n            this._routes.set(route.method, []);\r\n        }\r\n        // Give precedence to all of the earlier routes by adding this additional\r\n        // route to the end of the array.\r\n        this._routes.get(route.method).push(route);\r\n    }\r\n    /**\r\n     * Unregisters a route with the router.\r\n     *\r\n     * @param {module:workbox-routing.Route} route The route to unregister.\r\n     */\r\n    unregisterRoute(route) {\r\n        if (!this._routes.has(route.method)) {\r\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\r\n                method: route.method,\r\n            });\r\n        }\r\n        const routeIndex = this._routes.get(route.method).indexOf(route);\r\n        if (routeIndex > -1) {\r\n            this._routes.get(route.method).splice(routeIndex, 1);\r\n        }\r\n        else {\r\n            throw new WorkboxError('unregister-route-route-not-registered');\r\n        }\r\n    }\r\n}\r\nexport { Router };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Route } from './Route.js';\r\nimport { RegExpRoute } from './RegExpRoute.js';\r\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\r\nimport './_version.js';\r\n/**\r\n * Easily register a RegExp, string, or function with a caching\r\n * strategy to a singleton Router instance.\r\n *\r\n * This method will generate a Route for you if needed and\r\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\r\n *\r\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\r\n * If the capture param is a `Route`, all other arguments will be ignored.\r\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\r\n * function that returns a Promise resulting in a Response. This parameter\r\n * is required if `capture` is not a `Route` object.\r\n * @param {string} [method='GET'] The HTTP method to match the Route\r\n * against.\r\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\r\n * unregistering).\r\n *\r\n * @memberof module:workbox-routing\r\n */\r\nfunction registerRoute(capture, handler, method) {\r\n    let route;\r\n    if (typeof capture === 'string') {\r\n        const captureUrl = new URL(capture, location.href);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\r\n                throw new WorkboxError('invalid-string', {\r\n                    moduleName: 'workbox-routing',\r\n                    funcName: 'registerRoute',\r\n                    paramName: 'capture',\r\n                });\r\n            }\r\n            // We want to check if Express-style wildcards are in the pathname only.\r\n            // TODO: Remove this log message in v4.\r\n            const valueToCheck = capture.startsWith('http') ?\r\n                captureUrl.pathname : capture;\r\n            // See https://github.com/pillarjs/path-to-regexp#parameters\r\n            const wildcards = '[*:?+]';\r\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\r\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\r\n                    `character (${wildcards}). Strings are now always interpreted as ` +\r\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\r\n            }\r\n        }\r\n        const matchCallback = ({ url }) => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if ((url.pathname === captureUrl.pathname) &&\r\n                    (url.origin !== captureUrl.origin)) {\r\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\r\n                        `${url}. This route will only handle cross-origin requests ` +\r\n                        `if they match the entire URL.`);\r\n                }\r\n            }\r\n            return url.href === captureUrl.href;\r\n        };\r\n        // If `capture` is a string then `handler` and `method` must be present.\r\n        route = new Route(matchCallback, handler, method);\r\n    }\r\n    else if (capture instanceof RegExp) {\r\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\r\n        route = new RegExpRoute(capture, handler, method);\r\n    }\r\n    else if (typeof capture === 'function') {\r\n        // If `capture` is a function then `handler` and `method` must be present.\r\n        route = new Route(capture, handler, method);\r\n    }\r\n    else if (capture instanceof Route) {\r\n        route = capture;\r\n    }\r\n    else {\r\n        throw new WorkboxError('unsupported-route-type', {\r\n            moduleName: 'workbox-routing',\r\n            funcName: 'registerRoute',\r\n            paramName: 'capture',\r\n        });\r\n    }\r\n    const defaultRouter = getOrCreateDefaultRouter();\r\n    defaultRouter.registerRoute(route);\r\n    return route;\r\n}\r\nexport { registerRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * [precache()]{@link module:workbox-precaching.precache} and\r\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See\r\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, options) {\r\n    precache(entries);\r\n    addRoute(options);\r\n}\r\nexport { precacheAndRoute };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const cacheOkAndOpaquePlugin = {\r\n    /**\r\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\r\n     * 0 (opaque).\r\n     *\r\n     * @param {Object} options\r\n     * @param {Response} options.response\r\n     * @return {Response|null}\r\n     *\r\n     * @private\r\n     */\r\n    cacheWillUpdate: async ({ response }) => {\r\n        if (response.status === 200 || response.status === 0) {\r\n            return response;\r\n        }\r\n        return null;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { messages } from './utils/messages.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\r\n * request strategy.\r\n *\r\n * Resources are requested from both the cache and the network in parallel.\r\n * The strategy will respond with the cached version if available, otherwise\r\n * wait for the network response. The cache is updated with the network response\r\n * with each successful request.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\r\n * Opaque responses are cross-origin requests where the response doesn't\r\n * support [CORS]{@link https://enable-cors.org/}.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @memberof module:workbox-strategies\r\n */\r\nclass StaleWhileRevalidate {\r\n    /**\r\n     * @param {Object} options\r\n     * @param {string} options.cacheName Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\r\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} options.fetchOptions Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of all fetch() requests made by this strategy.\r\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     */\r\n    constructor(options = {}) {\r\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\r\n        this._plugins = options.plugins || [];\r\n        if (options.plugins) {\r\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\r\n            this._plugins = isUsingCacheWillUpdate ?\r\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\r\n        }\r\n        else {\r\n            // No plugins passed in, use the default plugin.\r\n            this._plugins = [cacheOkAndOpaquePlugin];\r\n        }\r\n        this._fetchOptions = options.fetchOptions;\r\n        this._matchOptions = options.matchOptions;\r\n    }\r\n    /**\r\n     * This method will perform a request strategy and follows an API that\r\n     * will work with the\r\n     * [Workbox Router]{@link module:workbox-routing.Router}.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {Event} [options.event] The event that triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async handle({ event, request }) {\r\n        const logs = [];\r\n        if (typeof request === 'string') {\r\n            request = new Request(request);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: 'StaleWhileRevalidate',\r\n                funcName: 'handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\r\n        let response = await cacheWrapper.match({\r\n            cacheName: this._cacheName,\r\n            request,\r\n            event,\r\n            matchOptions: this._matchOptions,\r\n            plugins: this._plugins,\r\n        });\r\n        let error;\r\n        if (response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\r\n                    ` cache. Will update with the network response in the background.`);\r\n            }\r\n            if (event) {\r\n                try {\r\n                    event.waitUntil(fetchAndCachePromise);\r\n                }\r\n                catch (error) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\r\n                    `Will wait for the network response.`);\r\n            }\r\n            try {\r\n                response = await fetchAndCachePromise;\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Request} options.request\r\n     * @param {Event} [options.event]\r\n     * @return {Promise<Response>}\r\n     *\r\n     * @private\r\n     */\r\n    async _getFromNetwork({ request, event }) {\r\n        const response = await fetchWrapper.fetch({\r\n            request,\r\n            event,\r\n            fetchOptions: this._fetchOptions,\r\n            plugins: this._plugins,\r\n        });\r\n        const cachePutPromise = cacheWrapper.put({\r\n            cacheName: this._cacheName,\r\n            request,\r\n            response: response.clone(),\r\n            event,\r\n            plugins: this._plugins,\r\n        });\r\n        if (event) {\r\n            try {\r\n                event.waitUntil(cachePutPromise);\r\n            }\r\n            catch (error) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\r\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\r\n                }\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { StaleWhileRevalidate };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport './_version.js';\r\n/**\r\n * Claim any currently available clients once the service worker\r\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\r\n *\r\n * @memberof module:workbox-core\r\n */\r\nfunction clientsClaim() {\r\n    self.addEventListener('activate', () => self.clients.claim());\r\n}\r\nexport { clientsClaim };\r\n","/* eslint-disable no-restricted-globals */\r\n\r\n// This service worker can be customized!\r\n// See https://developers.google.com/web/tools/workbox/modules\r\n// for the list of available Workbox modules, or add any other\r\n// code you'd like.\r\n// You can also remove this file if you'd prefer not to use a\r\n// service worker, and the Workbox build step will be skipped.\r\n\r\nimport { clientsClaim } from 'workbox-core';\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies';\r\n\r\nclientsClaim();\r\n\r\n// Precache all of the assets generated by your build process.\r\n// Their URLs are injected into the manifest variable below.\r\n// This variable must be present somewhere in your service worker file,\r\n// even if you decide not to use precaching. See https://cra.link/PWA\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Set up App Shell-style routing, so that all navigation requests\r\n// are fulfilled with your index.html shell. Learn more at\r\n// https://developers.google.com/web/fundamentals/architecture/app-shell\r\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\r\nregisterRoute(\r\n  // Return false to exempt requests from being fulfilled by index.html.\r\n  ({ request, url }) => {\r\n    // If this isn't a navigation, skip.\r\n    if (request.mode !== 'navigate') {\r\n      return false;\r\n    } // If this is a URL that starts with /_, skip.\r\n\r\n    if (url.pathname.startsWith('/_')) {\r\n      return false;\r\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\r\n\r\n    if (url.pathname.match(fileExtensionRegexp)) {\r\n      return false;\r\n    } // Return true to signal that we want to use the handler.\r\n\r\n    return true;\r\n  },\r\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\r\n);\r\n\r\n// An example runtime caching route for requests that aren't handled by the\r\n// precache, in this case same-origin .png requests like those from in public/\r\nregisterRoute(\r\n  // Add in any other file extensions or routing criteria as needed.\r\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\r\n  new StaleWhileRevalidate({\r\n    cacheName: 'images',\r\n    plugins: [\r\n      // Ensure that once this runtime cache reaches a maximum size the\r\n      // least-recently used images are removed.\r\n      new ExpirationPlugin({ maxEntries: 50 }),\r\n    ],\r\n  })\r\n);\r\n\r\n// This allows the web app to trigger skipWaiting via\r\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n});\r\n\r\n// Any other custom service worker logic can go here.\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Helper function that calls\r\n * {@link PrecacheController#createHandlerBoundToURL} on the default\r\n * {@link PrecacheController} instance.\r\n *\r\n * If you are creating your own {@link PrecacheController}, then call the\r\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\r\n * instead of using this function.\r\n *\r\n * @param {string} url The precached URL which will be used to lookup the\r\n * `Response`.\r\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n * response from the network if there's a precache miss.\r\n * @return {module:workbox-routing~handlerCallback}\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction createHandlerBoundToURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.createHandlerBoundToURL(url);\r\n}\r\nexport { createHandlerBoundToURL };\r\n"]}